<?php

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Link;
use Drupal\entity_reference_layout\EntityReferenceLayoutRevisionsFieldItemList;
use Drupal\crop\Entity\Crop;
use Drupal\Component\Utility\Html;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\easy_breadcrumb\EasyBreadcrumbConstants;
use Drupal\ilr\Entity\EventNodeBase;

/**
 * @file Theme file for the union_marketing.theme.
 */

/**
 * Implements hook_preprocess_page().
 */
function union_marketing_preprocess_page(array &$variables) {
  if (getenv('LIVERELOAD')) {
    $variables['#attached']['library'][] = 'union_marketing/livereload';
  }
}

/**
 * Implements template_preprocess_html().
 */
function union_marketing_preprocess_html(&$variables) {
  if (isset($variables['node_type'])) {
    // Add node-TYPE class to the <body> element.
    $variables['attributes']['class'][] = 'node--' . $variables['node_type'];
  }

  if (isset($variables['root_path'])) {
    $entity_type = $variables['root_path'];

    if ($entity_type === 'collection' && \Drupal::routeMatch()->getParameter('collection_item')) {
      $entity_type = 'collection_item';
    }

    if ($entity_type && $entity = \Drupal::routeMatch()->getParameter($entity_type)) {
      if ($entity instanceof ContentEntityInterface) {
        $variables['attributes']['class'][] = $entity_type;
        $variables['attributes']['class'][] = $entity_type . '--' . str_replace('_', '-', $entity->bundle());
      }
    }
  }

  // Check whether the nearest path entity is set to suppress dates and add a body class if so.
  $evergreenable_entity = FALSE;
  foreach (\Drupal::service('path_alias.entities')->getPathAliasEntities() as $path_entity) {
    if ($path_entity instanceof FieldableEntityInterface && $path_entity->hasField('field_suppress_date_display')) {
      $evergreenable_entity = $path_entity;
    }
  }

  if ($evergreenable_entity && $evergreenable_entity->field_suppress_date_display->value) {
    $variables['attributes']['class'][] = 'content--evergreen';
  }

  $group_info = \Drupal::service('block_visibility_groups_admin.lister');
  if ($active_groups = $group_info->getActiveGroups()) {
    foreach ($active_groups as $bvg) {
      $variables['attributes']['class'][] = 'bvg--' . Html::cleanCssIdentifier($bvg->id());
    }
  }
}

/**
 * Implements template_preprocess_node().
 */
function union_marketing_preprocess_node(&$variables) {
  $variables['url_attributes'] = new Attribute([
    'title' => $variables['node']->label()
  ]);

  if ($variables['node']->bundle() === 'post_document' && !$variables['node']->field_document->isEmpty()) {
    if ($variables['node']->field_document->entity->bundle() === 'remote_url') {
      $variables['url'] = $variables['node']->field_document->entity->field_media_media_remote->value;
    }
    elseif ($variables['node']->field_document->entity->bundle() === 'file') {
      $variables['url'] = $variables['node']->field_document->entity->field_media_file->entity->createFileUrl();
    }

    $variables['url_attributes']->setAttribute('target', '_blank');
  }

  if ($variables['node']->bundle() === 'video_post') {
    $variables['url_attributes']->setAttribute('class', ['use-ajax', 'cu-link--modal']);
    $variables['url_attributes']->setAttribute('data-dialog-type', 'modal');
    $variables['url_attributes']->setAttribute('data-dialog-options', Json::encode([
      'width' => 700,
      'classes' => ['ui-dialog' => 'cu-modal'],
    ]));
  }
}

/**
 * Implements template_preporcess_views_view__VIEW_ID().
 *
 * Sets the row content for the view template.
 * @see views-view--courses-by-topic.html.twig
 */
function union_marketing_preprocess_views_view__courses_by_topic(&$variables) {
  $rows = $variables['rows'];
  foreach ($rows as $id => $row) {
    $variables['rows'][$id] = [];
    $variables['rows'][$id]['content'] = $row;
  }
}

/**
 * Implements template_preprocess_media_oembed_iframe().
 *
 * Create a new `media_processed` variable that fixes some accessibility issues
 * with oembed markup.
 */
function union_marketing_preprocess_media_oembed_iframe(&$variables) {
  $variables['media_processed']  = '';
  $document = new \DOMDocument('1.0', 'UTF-8');
  $internalErrors = libxml_use_internal_errors(true); // Disable XML errors;
  $document->loadHTML($variables['media']);
  libxml_use_internal_errors($internalErrors); // Restore XML error settings;

  // Fix iframes, specifically those from youtube.
  foreach ($document->getElementsByTagName('iframe') as $iframe) {
    // If there is no title on the iframe, add a generic one.
    if ($iframe->hasAttribute('title') === FALSE) {
      $parsed_url = parse_url($iframe->getAttribute('src'));
      $iframe->setAttribute('title', 'Embedded media from ' . $parsed_url['host']);
    }

    // Remove the frameborder attribute if it exists.
    if ($iframe->hasAttribute('frameborder')) {
      $iframe->removeAttribute('frameborder');
    }

    // Add an inline border style, since we just removed the frameborder.
    if ($iframe->hasAttribute('style')) {
      $iframe->setAttribute('style', $iframe->getAttribute('style') . ' border: 0;');
    }
    else {
      $iframe->setAttribute('style', 'border: 0;');
    }
  }

  $body_node = $document->getElementsByTagName('body')->item(0);
  $comment_node = $document->createComment('Processed by union_marketing_preprocess_media_oembed_iframe():');
  $body_node->insertBefore($comment_node, $body_node->firstChild);

  foreach ($body_node->childNodes as $node) {
    $variables['media_processed'] .= $document->saveHTML($node);
  }
}

/**
 * Implements hook_library_info_alter().
 */
function union_marketing_library_info_alter(&$libraries, $extension) {
  // Add the Union forms component library to webforms.
  if ($extension === 'webform' && isset($libraries['webform.form'])) {
    $libraries['webform.form']['dependencies'][] = 'union_organizer/form';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add some post theme suggestions to all post_* node types.
 *
 * @see node_theme_suggestions_node().
 */
function union_marketing_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $bundle = $variables['elements']['#node']->type->entity;
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  if ($bundle->getThirdPartySetting('extended_post', 'extends_posts')) {
    // Prepend these suggestions to the stack so that they end up with _lower_
    // priority than the more specific content type ones.
    array_unshift($suggestions, 'node__post__' . $sanitized_view_mode);
    array_unshift($suggestions, 'node__post');
  }

  if ($variables['elements']['#node'] instanceof EventNodeBase) {
    // Prepend these suggestions to the stack so that it ends up with a _lower_
    // priority than the more specific content type ones.
    array_unshift($suggestions, 'node__eventalicious__' . $sanitized_view_mode);
    array_unshift($suggestions, 'node__eventalicious');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions for view modes to all terms.
 */
function union_marketing_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  array_unshift($suggestions, 'taxonomy_term__' . $sanitized_view_mode);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function union_marketing_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (!isset($variables['menu_name'])) {
    return;
  }

  $is_subsite = strpos($variables['menu_name'], 'subsite-') === 0;
  $is_section = strpos($variables['menu_name'], 'section-') === 0;

  // @see \Drupal\collection_menu_paragraph\Plugin\paragraphs\Behavior\CollectionMenu::view().
  $is_collection_menu_paragraph = preg_match('/subsite_\d+_collection_menu_paragraph/', $variables['theme_hook_original']);

  if ($is_subsite) {
    $suggestions[] = 'menu__type_subsite';
  }

  // Even subsite menus should appear as section menus when placed via the
  // collection menu paragraph. Placing this suggestion last means that it will
  // be used first, since later suggestions are considered more specific.
  if ($is_section || $is_collection_menu_paragraph) {
    $suggestions[] = 'menu__type_section';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add generic template suggestions for categories and tags.
 */
function union_marketing_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $element = $variables['elements'];

  if ($element['#base_plugin_id'] === 'field_block' && (strpos($element['#derivative_plugin_id'], 'categories:name') > 0 || strpos($element['#derivative_plugin_id'], 'tags:name') > 0)) {
    $suggestions[] = 'block__field_block__taxonomy_term__blog_term__name';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function union_marketing_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  // Include a field theme suggestion with the current view mode.
  // @see system_theme_suggestions_field().
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];

  // Add some post theme suggestions to fields on post-like bundles.
  if ($element['#entity_type'] === 'node' && in_array($element['#bundle'], \Drupal::service('extended_post.manager')->getPostTypes())) {
    // Insert the suggestion after the field name (e.g. `field__node__title`), but
    // before the bundle name (e.g. `field__node__title__video_post`).
    // @see layout_builder_theme_suggestions_field_alter().
    array_splice($suggestions, -3, 0, ['field__node__' . $element['#field_name'] . '__post']);
  }

  // Add a theme suggestion to fields on event-like bundles.
  if ($element['#entity_type'] === 'node' && $element['#object'] instanceof EventNodeBase) {
    array_unshift($suggestions, 'field__node__eventalicious');
  }
}

/**
 *  Implements hook_theme_suggestions_HOOK_alter().
 */
function union_marketing_theme_suggestions_webform_alter(array &$suggestions, array $variables) {
  if ($behavior = $variables['element']['elements']['behavior']['#default_value'] ?? FALSE) {
    $suggestions[] = 'webform__behavior__' . $behavior;
  }
}

/**
 * Implements hook_preprocess_persona().
 *
 * Change links of some fields to modals.
 */
function union_marketing_preprocess_persona(&$variables) {
  foreach (['display_name', 'field_photo'] as $field) {
    if (!empty($variables['content'][$field][0]['#url'])) {
      $variables['content'][$field][0]['#url']->setOption('attributes', [
        'class' => ['use-ajax'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode([
          'width' => '90%',
          'classes' => ['ui-dialog' => 'cu-modal'],
        ]),
      ]);
    }
  }
}

/**
 * Implements hook_preprocess_links().
 *
 * Update the read more links for personas.
 */
function union_marketing_preprocess_links(&$variables) {
  if (isset($variables['links']['body-readmore'])) {
    $link =& $variables['links']['body-readmore']['link'];
    $route_parameters = $link['#url']->getRouteParameters();

    // Only update persona links for now.
    if (!isset($route_parameters['persona'])) {
      return;
    }

    $persona_storage = \Drupal::entityTypeManager()->getStorage('persona');
    $persona = $persona_storage->load($route_parameters['persona']);

    if (empty($persona)) {
      return;
    }

    $link['#title'] = new FormattableMarkup('@title <span class="sr-only">for @person_name</span>', [
      '@title' => t('Read full bio'),
      '@person_name' => $persona->getDisplayName(),
    ]);

    $link['#url']->setOption('attributes', [
      'class' => ['use-ajax', 'cu-link--modal'],
      'data-dialog-type' => 'modal',
      'data-dialog-options' => Json::encode([
        'width' => '90%',
        'classes' => ['ui-dialog' => 'cu-modal'],
      ]),
    ]);
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function union_marketing_preprocess_paragraph__deck(&$variables) {
  $grid_variant = ($variables['paragraph']->hasField('field_grid_variant')) ? $variables['paragraph']->field_grid_variant->value : 'two-up';

  $variables['attributes']['class'][] = 'cu-grid--' . $grid_variant;

  if ($grid_variant !== '3col') {
    $variables['attributes']['class'][] = 'cu-grid--2col';
    $variables['attributes']['class'][] = 'cu-grid--gapless';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function union_marketing_preprocess_paragraph__rich_text(&$variables) {
  $variables['content']['field_body'][0]['#attached'] = [
    'library' => ['ilr_effects/ilr_effects'],
  ];
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * Set grids column count on curated post listings (defaults to 3, 4 on story
 * nodes).
 */
function union_marketing_preprocess_paragraph__curated_post_listing(&$variables) {
  if (!$variables['paragraph']->getParentEntity() || $variables['paragraph']->getParentEntity()->bundle() !== 'section') {
    return;
  }

  if ($variables['paragraph']->getParentEntity()->getParentEntity()) {
    $variables['attributes']['class'][] = ($variables['paragraph']->getParentEntity()->getParentEntity()->bundle() === 'story')
      ? 'cu-grid--4col'
      : 'cu-grid--3col';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function union_marketing_preprocess_paragraph__promo(&$variables) {
  // If there is no title on the link, then don't render the button. The entire
  // promo card is already a link.
  if (empty($variables['paragraph']->field_link->title)) {
    unset($variables['paragraph']->field_link);
  }

  if (!$variables['paragraph']->hasField('field_content') || $variables['paragraph']->field_content->isEmpty()) {
    return;
  }

  if (!$variables['paragraph']->field_content->entity->isPublished()) {
    $variables['attributes']['class'][] = 'cu-card--promo--unpublished-content';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function union_marketing_preprocess_paragraph__testimonial_deck(&$variables) {
  $variables['testimonials'] = [];

  foreach ($variables['paragraph']->field_components->referencedEntities() as $testimonial_paragraph) {
    $variables['testimonials'][] = [
      'quote' => $testimonial_paragraph->field_quote->view('teaser'),
      'name' => $testimonial_paragraph->field_name->view('teaser'),
      'title' => $testimonial_paragraph->field_subheading->view('teaser'),
      'media' => $testimonial_paragraph->field_media->view('thumbnail'),
    ];
  }
}

/**
 * {@inheritdoc}
 */
function union_marketing_preprocess_paragraph__section_navigation(&$variables) {
  $variables['#attached']['library'][] = 'union_marketing/banner_nav';
}

/**
 * Implements hook_preprocess_field().
 */
function union_marketing_preprocess_field__paragraph__field_heading__promo(&$variables) {
  $variables['attributes']['class'][] = 'cu-heading';
  $variables['attributes']['class'][] = 'cu-text--xxxl';
}

/**
 * Implements hook_preprocess_field().
 */
function union_marketing_preprocess_field__paragraph__field_subheading__promo(&$variables) {
  $variables['attributes']['class'][] = 'cu-heading';
}

/**
 * Implements hook_preprocess_field().
 */
function union_marketing_preprocess_field__node__field_representative_img_caption(&$variables) {
  $variables['attributes']['id'][] = 'media__caption-' . $variables['element']['#object']->id();
}

/**
 * Implements hook_preprocess_field().
 */
function union_marketing_preprocess_field__field_representative_image(&$variables) {
  if (!isset($variables['element']['#object'])) {
    return;
  }

  $entity = $variables['element']['#object'];
  $variables['attributes']['role'][] = 'figure';

  if ($entity->hasField('field_representative_img_caption') && !$entity->field_representative_img_caption->isEmpty()) {
    $variables['attributes']['aria-labelledby'][] = 'media__caption-' . $entity->id();
  }
}

/**
 * Implements hook_preprocess_collection().
 *
 * Modify the template theme suggestions when blog collections are rendered as
 * banners through layout builder. This allows us to modify the heading level.
 */
function union_marketing_preprocess_collection__blog__banner(&$variables) {
  $elements = &$variables['content']['_layout_builder'][0]['banner'];
  foreach ($elements as &$render_array) {
    if (isset($render_array["#plugin_id"]) && $render_array["#plugin_id"] == "field_block:collection:blog:name") {
      $render_array['#theme'] = 'block__blog_collection__banner__name';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Until we can find a better way, this allows us to pass the nid to the
 * template for the read more link.
 *
 * @todo Refactor this as soon as we have time.
 */
function union_marketing_preprocess_block__extra_field_block__node__story__links(&$variables) {
  if (isset($variables['content']['#lazy_builder'][1][0]) && $variables['content']['#lazy_builder'][1][1] === 'banner') {
    $variables['nid'] = $variables['content']['#lazy_builder'][1][0];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function union_marketing_preprocess_block__extra_field_block__node__story__extra_field_previous_next_story(&$variables) {
  $variables['attributes']['class'][] = 'previous-and-next-buttons';
}

/**
 * Implements hook_preprocess_block()
 */
function union_marketing_preprocess_block__remote_html_snippet_block(&$variables) {
  $variables['attributes']['class'][] = 'cu-component';
}

/**
 * Implements hook_preprocess_HOOK() for imagecache_external__instagram_post.
 */
function union_marketing_preprocess_imagecache_external__instagram_post(&$variables) {
  // Change the image style for instagram posts.
  $variables['style_name'] = 'medium_1_1';

  // Since we changed the image style, we need to re-render the image, too. See
  // template_preprocess_imagecache_external();
  if ($variables['uri'] = imagecache_external_generate_path($variables['uri'])) {
    template_preprocess_image_style($variables);
  }
}

/**
 * Implements hook_preprocess_image_formatter().
 *
 * Set the --cu-image-position CSS property for images with a focal point crop.
 */
function union_marketing_preprocess_image_formatter(&$variables) {
  /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $image */
  $image = $variables['item'];
  $crop_type = \Drupal::config('focal_point.settings')->get('crop_type');
  $crop = Crop::findCrop($image->entity->getFileUri(), $crop_type);

  if ($crop) {
    $image_props = $image->getValue();
    $anchor = \Drupal::service('focal_point.manager')
      ->absoluteToRelative($crop->x->value, $crop->y->value, $image_props['width'], $image_props['height']);
    $variables['image']['#attributes']['style'][] = '--cu-image-position: ' . $anchor['x'] . '% ' . $anchor['y'] . '%;';
  }
}

/**
 * Implements hook__preprocess_HOOK().
 *
 * Remove the page title from the breadcrumbs for postalicious content.
 */
function union_marketing_preprocess_breadcrumb(&$variables) {
  $easy_breadcrumb_config = \Drupal::config('easy_breadcrumb.settings');

  if (!$easy_breadcrumb_config || empty($variables['breadcrumb'])) {
    return;
  }

  $include_title_segment = $easy_breadcrumb_config->get(EasyBreadcrumbConstants::INCLUDE_TITLE_SEGMENT);

  if (!$include_title_segment) {
    return;
  }

  $route_match = \Drupal::routeMatch();
  $remove_last_crumb = FALSE;

  // Remove the last item for nodes that extend posts or are projects.
  if ($node = $route_match->getParameter('node')) {
    $bundle = $node->type->entity;
    $remove_last_crumb = $bundle->getThirdPartySetting('extended_post', 'extends_posts') || $bundle->getThirdPartySetting('collection_projects', 'is_project');
  }

  // Remove the last item for cross-posts.
  if ($route_match->getParameter('collection_item')) {
    $remove_last_crumb = TRUE;
  }

  if ($remove_last_crumb) {
    array_pop($variables['breadcrumb']);
    $variables['attributes']['class'][] = 'breadcrumb-altered';
  }
}

{#
/**
 * @file
 * Theme override to display a section paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% if content.field_heading['#items'] is not empty %}
  {% set heading = content.field_heading['#items'].getValue().0.value %}
  {% set subheading = (content.field_subheading['#items'] is not empty)
    ? content.field_subheading['#items'].getValue().0.value|t
    : ''
  %}

  {# Render these paragraph fields as a cu-section-heading component and pass
  that along to the layout.

  This only works because a) this section paragraph type is defined as a layout
  using Entity Reference Layout module and 2) we display a special
  'ilr_hidden_header' item in our custom layouts.

  Entity Reference Layout collects any paragraphs in this section/layout and
  adds them to `content._entity_reference_layout.LAYOUT_REGION`. Here, we define
  and append a markup render array called 'ilr_hidden_header'. This special
  render array is displayed in our custom layouts. #}
  {% set ilr_header = {
    'ilr_hidden_header': {
      '#markup': include('@union/_section-heading.twig', {
        attributes: { class: 'cu-section-heading--framed' },
        heading: heading|t,
        subheading: subheading
      }, with_context = false)
    }
  } %}

  {# Egad! See https://www.drupal.org/project/components/issues/3081314 for a
  possible future improvement to this syntax. #}
  {% set content = content|merge({
    '_entity_reference_layout': content._entity_reference_layout|merge({
      'content': content._entity_reference_layout.content|merge(ilr_header)
    })
  }) %}
{% endif %}

{{ content|without('field_heading','field_subheading') }}

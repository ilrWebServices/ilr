{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{{ attach_library('union_organizer/button') }}

{% set rendered_description %}
<div class="pinned-wrapper">
<h3 class="cu-heading">{{ label }}</h3>
{{ title_suffix }}

{{ content.body }}

<hr class="pad" />

{% if upcoming_classes|length > 0 %}
  {% set feature_list_items = [
    {
      name: upcoming_classes.0.field_class_date|view('teaser'),
      icon: 'check-circle',
      icon_size: '1em'
    },
    {
      name: upcoming_classes.0.computed_delivery_method,
      icon: 'check-circle',
      icon_size: '1em'
    }
  ] %}

  {% if not upcoming_classes.0.field_price.isEmpty() %}
  {% set feature_list_items = feature_list_items|merge([{
    name: upcoming_classes.0.field_price|view('teaser'),
    icon: 'check-circle',
    icon_size: '1em'
  }]) %}
  {% endif %}

  {% if not upcoming_classes.0.field_address.isEmpty() %}
  {% set feature_list_items = feature_list_items|merge([{
    name: upcoming_classes.0.field_address|view('teaser'),
    icon: 'check-circle',
    icon_size: '1em'
  }]) %}
  {% endif %}

  {% include '@union/_feature-list.twig' with {
    items: feature_list_items,
    content_attributes: { class: 'cu-grid' }
  } only %}

  {% set register_link_text = 'Register <span class="visually-hidden"> for ' ~ node.label ~ '</span>'%}
{% else %}
  {# TODO Consider allowing this text to be editable.  #}
  <p><em>{{ "Dates for sessions will be posted as soon as they are available."|t }}</em></p>
  {% set register_link_text = 'Learn more <span class="visually-hidden"> about ' ~ node.label ~ '</span>'%}
{% endif %}

<hr class="pad" />

{% if upcoming_classes|length > 1 %}
<p class="cu-style cu-style--link">{{ 'See more dates and locations'|t }}</p><hr class="pad" />
{% endif %}
</div>

<p class="cu-button">{{ register_link_text|raw }}</p>
{% endset %}

{% include '@union/_card.twig' with {
  card_content: rendered_description,
  card_link_url: url,
  card_link_alt: register_link_text|striptags,
  attributes: attributes.addClass([
    'node--' ~ node.bundle|clean_class,
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'cu-card--padded',
    'cu-card--pinned'
  ])
} only %}

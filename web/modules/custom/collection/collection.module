<?php

use \Drupal\Core\Entity\EntityInterface;

/**
 * @file
 * Contains collection.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function collection_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the collection module.
    case 'help.page.collection':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows collections of content and configuration entities.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function collection_toolbar_alter(&$items) {
  $items['administration']['#attached']['library'][] = 'collection/toolbar';
}

/**
 * Implements hook_theme().
 */
function collection_theme() {
  $theme = [];
  $theme['collection'] = [
    'render element' => 'elements',
    'file' => 'collection.page.inc',
    'template' => 'collection',
  ];
  $theme['collection_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'collection.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function collection_theme_suggestions_collection(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#collection'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'collection__' . $sanitized_view_mode;
  $suggestions[] = 'collection__' . $entity->bundle();
  $suggestions[] = 'collection__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'collection__' . $entity->id();
  $suggestions[] = 'collection__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_delete().
 *
 * Delete any corresponding collection items when an entity is deleted.
 */
function collection_entity_delete(EntityInterface $entity) {
  $item_storage = \Drupal::service('entity_type.manager')->getStorage('collection_item');
  $collection_items = $item_storage->loadByProperties([
    'item__target_id' => $entity->id(),
    'item__target_type' => $entity->getEntityTypeId()
  ]);

  foreach ($collection_items as $collection_item) {
    $collection_item->delete();
  }
}

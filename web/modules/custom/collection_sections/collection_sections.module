<?php

/**
 * @file
 * Contains collection_sections.module.
 */

 use Drupal\Core\Form\FormStateInterface;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
 use Drupal\Component\Utility\Html;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the collection new node form to add a section menu option.
 *
 * @see CollectionNewNodeForm::buildForm()
 */
function collection_sections_form_collection_new_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_selector */
  $menu_parent_selector = \Drupal::service('menu.parent_form_selector');

  /** @var \Drupal\collection\Entity\CollectionInterface $collection */
  $collection = $form_state->get('collection');

  // Check if this collection has a section menu.
  foreach ($collection->findItems('menu') as $collection_item_menu) {
    if ($collection_item_menu->getAttribute('section_collection_id') !== FALSE) {
      $section_menu = $collection_item_menu->item->entity;
    }
  }

  if (empty($section_menu)) {
    return;
  }

  $available_menus[$section_menu->id()] = $section_menu->label();
  $default = $section_menu->id() . ':';
  $parent_element = $menu_parent_selector->parentSelectElement($default, '', $available_menus);

  $form['collection_section_menu'] = [
    '#type' => 'details',
    '#title' => $section_menu->label(),
    '#open' => TRUE,
    '#tree' => TRUE,
    '#attributes' => ['class' => ['menu-link-form']],
  ];
  $form['collection_section_menu']['link'] = [
    '#type' => 'container',
    '#parents' => ['collection_section_menu'],
  ];
  $form['collection_section_menu']['link']['menu_parent'] = $parent_element;
  $form['collection_section_menu']['link']['menu_parent']['#title'] = t('Parent item');
  $form['collection_section_menu']['link']['menu_parent']['#description'] = t('The parent item is used to create the path alias.');
  $form['collection_section_menu']['link']['menu_parent']['#attributes']['class'][] = 'menu-parent-select';
  $form['collection_section_menu']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable the menu link'),
    '#default_value' => 1,
  ];

  // Add an additional submit handler.
  $form['#submit'][] = 'collection_sections_form_collection_new_node_form_submit';
}

/**
 * Form submission handler for menu item field on the collection new node form.
 *
 * @see collection_sections_form_collection_new_node_form_alter()
 */
function collection_sections_form_collection_new_node_form_submit($form, FormStateInterface $form_state) {
  if ($node = $form_state->get('node')) {
    $values = $form_state->getValue('collection_section_menu');
    list($menu_name, $parent) = explode(':', $values['menu_parent'], 2);

    // Create a new menu_link_content entity.
    $entity = MenuLinkContent::create([
      'link' => ['uri' => 'entity:node/' . $node->id()],
      'langcode' => $node->language()->getId(),
    ]);
    $entity->enabled->value = $values['enabled'];
    $entity->title->value = $node->label();
    $entity->menu_name->value = $menu_name;
    $entity->parent->value = $parent;
    $entity->isDefaultRevision($node->isDefaultRevision());
    $entity->save();

    // Save the node again to trigger path updates.
    $node->save();
  }
}

<?php

/**
 * @file
 * Contains collection_subsites.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\collection\Entity\CollectionType;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\ilr\FieldStorageDefinition;
use Drupal\Core\Field\FieldDefinition;

/**
 * Implements hook_theme().
 */
function collection_subsites_theme() {
  return [
    'subsite_branding_block' => [
      'variables' => [
        'subsite_logo' => NULL,
        'subsite_slogan' => NULL,
        'subsite_name' => NULL,
        'subsite_path' => '/',
      ],
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function collection_subsites_preprocess_html(&$variables) {
  $collection_subsites_resolver = \Drupal::service('collection_subsites.resolver');
  foreach (\Drupal::routeMatch()->getParameters() as $parameter) {
    if ($parameter instanceof EntityInterface && $parameter->hasLinkTemplate('canonical')) {
      if ($subsite = $collection_subsites_resolver->getSubsite($parameter)) {
        $variables['attributes']['class'][] = 'subsite';
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Add a 'Contains Subsites' setting to collection_types.
 */
function collection_subsites_form_collection_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $collection_type = $form_state->getFormObject()->getEntity();

  $form['contains_subsites'] = [
    '#type' => 'checkbox',
    '#title' => t('Contains subsites'),
    '#description' => t('If enabled, a collection of this type will represent a subsite.'),
    '#default_value' => $collection_type->getThirdPartySetting('collection_subsites', 'contains_subsites'),
    '#weight' => 1
  ];

  $form['#entity_builders'][] = 'collection_subsites_form_collection_form_builder';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function collection_subsites_form_collection_form_alter(&$form, FormStateInterface $form_state) {
  $form['branding'] = [
    '#type' => 'details',
    '#title' => t('Branding'),
    '#group' => 'advanced',
    '#weight' => 60,
    '#optional' => TRUE,
    '#open' => FALSE,
  ];

  $form['logo']['#group'] = 'branding';
}

/**
 * Entity builder for the collection type configuration entity.
 */
function collection_subsites_form_collection_form_builder($entity_type, CollectionType $collection_type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('contains_subsites')) {
    $collection_type->setThirdPartySetting('collection_subsites', 'contains_subsites', $form_state->getValue('contains_subsites'));
    return;
  }

  $collection_type->unsetThirdPartySetting('collection_subsites', 'contains_subsites');
}

/**
 * Implements hook_entity_field_storage_info().
 */
function collection_subsites_entity_field_storage_info(EntityTypeInterface $entity_type) {
  $definitions = [];

  if ($entity_type->id() == 'collection') {
    $definitions['logo'] = FieldStorageDefinition::create('entity_reference')
      ->setName('logo')
      ->setLabel(t('Logo'))
      ->setRevisionable(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setSetting('target_type', 'media');
  }

  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 *
 * - Add the logo field to subsite collections.
 */
function collection_subsites_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  if ($entity_type->id() !== 'collection') {
    return [];
  }

  $collection_type = \Drupal::service('entity_type.manager')->getStorage('collection_type')->load($bundle);
  $is_subsite = (bool) $collection_type->getThirdPartySetting('collection_subsites', 'contains_subsites');
  $fields = [];

  if ($is_subsite) {
    $custom_field_storage = collection_subsites_entity_field_storage_info($entity_type);
    $fields[$custom_field_storage['logo']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['logo']);

    $fields[$custom_field_storage['logo']->getName()]
      ->setLabel(t('SVG Logo'))
      ->setSettings([
        'handler' => 'default:media',
        'handler_settings' => [
          'target_bundles' => [
            'svg' => 'svg'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'media_library_widget',
        'weight' => 1,
      ]);
  }

  return $fields;
}

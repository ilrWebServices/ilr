<?php

/**
 * @file
 * Contains ilr.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\ilr\FieldStorageDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Field\Entity\BaseFieldOverride;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\WidgetBase;

/**
 * Implements hook_theme().
 */
function ilr_theme($existing, $type, $theme, $path) {
  return [
    'ilr_certificate_basics_block' => [
      'variables' => [
        'node' => [],
      ],
    ],
    'ilr_class_register_block' => [
      'variables' => [
        'classes' => [],
      ],
    ],
    'ilr_course_certificates_block' => [
      'variables' => [
        'node' => [],
        'certificates' => [],
      ],
    ],
    'ilr_course_page_nav_block' => [
      'variables' => [
        'node' => [],
        'links' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_field_storage_info().
 */
function ilr_entity_field_storage_info(EntityTypeInterface $entity_type) {
  $definitions = [];

  if ($entity_type->id() == 'node') {
    $definitions['classes'] = FieldStorageDefinition::create('entity_reference')
      ->setName('classes')
      ->setLabel(t('Classes'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
    $definitions['certificates'] = FieldStorageDefinition::create('entity_reference')
      ->setName('certificates')
      ->setLabel(t('Certificates'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
    $definitions['sessions'] = FieldStorageDefinition::create('entity_reference')
      ->setName('sessions')
      ->setLabel(t('Sessions'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setTargetEntityTypeId($entity_type->id())
      ->setSetting('target_type', 'class_session');
  }

  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 *
 * - Add computed fields to course nodes.
 * - Refine the settings for the collection_item `item` field:
 *   - Allow `media` and `taxonomy_term` entities.
 *   - Restrict the bundles for all allowed entities.
 *   - @todo: Allow these settings to be configured per collection_item bundle
 *     via the UI.
 *  - Add computed fields to class nodes.
 */
function ilr_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];

  if ($entity_type->id() == 'node' && $bundle == 'course') {
    $custom_field_storage = ilr_entity_field_storage_info($entity_type);

    $fields[$custom_field_storage['classes']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['classes']);

    $fields[$custom_field_storage['classes']->getName()]
      ->setLabel(t('Classes'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseClassItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'class' => 'class'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => -5,
      ]);

    $fields[$custom_field_storage['certificates']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['certificates']);

    $fields[$custom_field_storage['certificates']->getName()]
      ->setLabel(t('Certificates'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseCertificateItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'certificate' => 'certificate'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', FALSE);
  }

  if ($entity_type->id() == 'node' && $bundle == 'class') {
    $custom_field_storage = ilr_entity_field_storage_info($entity_type);

    $fields[$custom_field_storage['sessions']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['sessions']);

    $fields[$custom_field_storage['sessions']->getName()]
      ->setLabel(t('Sessions'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\ClassSessionItemList')
      ->setSettings([
        'handler' => 'default:class_session',
        'handler_settings' => [
          'target_bundles' => NULL,
        ],
      ]);
  }

  // Apply custom settings to different collection item types.
  /** @todo Move this to dynamic settings in a new function collection_entity_bundle_field_info() */
  if ($entity_type->id() === 'collection_item') {
    // Update default collection_item to allow lots of entity types.
    if ($bundle === 'default') {
      $fields['item'] = BaseFieldOverride::createFromBaseFieldDefinition($base_field_definitions['item'], $bundle);
      $entity_type_ids_setting = $fields['item']->getSetting('entity_type_ids');
      $fields['item']
        ->setSetting('entity_type_ids', $entity_type_ids_setting + [
          'collection' => 'collection',
          'media' => 'media',
          'persona' => 'persona',
          'taxonomy_term' => 'taxonomy_term',
        ])
        ->setSetting('media', [
          'handler' => 'default:media',
          'handler_settings' => [
            'target_bundles' => [
              'image' => 'image',
              'remote_video' => 'remote_video',
            ]
          ]
        ])
        ->setSetting('node', [
          'handler' => 'default:node',
          'handler_settings' => [
            'target_bundles' => [
              'certificate' => 'certificate',
              'course' => 'course',
              'page' => 'page',
              'post' => 'post',
            ]
          ]
        ])
        ->setSetting('persona', [
          'handler' => 'default:persona',
          'handler_settings' => [
            'target_bundles' => [
              'author' => 'author',
              'faculty' => 'faculty',
              'staff' => 'staff',
            ]
          ]
        ])
        ->setSetting('taxonomy_term', [
          'handler' => 'default:taxonomy_term',
          'handler_settings' => [
            'target_bundles' => [
              'topics' => 'topics',
            ]
          ]
        ]);
    }

    // Update blog collection_item to allow only post and media_mention nodes.
    if ($bundle === 'blog') {
      $fields['item'] = BaseFieldOverride::createFromBaseFieldDefinition($base_field_definitions['item'], $bundle);
      $fields['item']
        ->setSetting('node', [
          'handler' => 'default:node',
          'handler_settings' => [
            'target_bundles' => [
              'post' => 'post',
              'media_mention' => 'media_mention',
            ]
          ]
        ]);
    }

    // Update publication issues collection_item to allow only story and
    // media_mention nodes.
    if ($bundle === 'publication_issue') {
      $fields['item'] = BaseFieldOverride::createFromBaseFieldDefinition($base_field_definitions['item'], $bundle);
      $fields['item']
        ->setSetting('node', [
          'handler' => 'default:node',
          'handler_settings' => [
            'target_bundles' => [
              'story' => 'story',
              'media_mention' => 'media_mention',
            ],
          ],
        ]);
    }
  }

  return $fields;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ilr_entity_extra_field_info() {
  $extra = [];

  // Add a pseudo-field that can display the computed certificates field on this
  // course node. This will be exposed as a field block to layout builder.
  $extra['node']['course']['display']['ilr_certificates'] = [
    'label' => t('Certificates (computed)'),
    'description' => t('This is a computed backreference to certificates.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  // Add a pseudo-field that can display the course page links.
  $extra['node']['course']['display']['ilr_course_page_links'] = [
    'label' => t('Course Page Links (extra)'),
    'description' => t('A list of course page links.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  $extra['node']['media_mention']['display']['media_outlet_logo'] = [
    'label' => t('Media outlet logo'),
    'description' => t('The associated logo media entity image field.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  $extra['node']['media_mention']['display']['media_outlet_name'] = [
    'label' => t('Media outlet name'),
    'description' => t('The associated logo media entity name field.'),
    'weight' => 0,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ilr_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('ilr_certificates') && $view_mode === 'full') {
    $build['ilr_certificates'] = [
      '#theme' => 'ilr_course_certificates_block',
      '#node' => $entity,
      '#certificates' => $entity->certificates->referencedEntities(),
    ];
  }

  if ($display->getComponent('ilr_course_page_links') && $view_mode === 'full') {
    $page_links = [
      [
        'url' => '#course-details',
        'text' => 'Course Details',
      ],
      [
        'url' => '#instructors',
        'text' => 'The Instructors',
      ],
      [
        'url' => '#related-courses',
        'text' => 'Related Courses',
      ],
      [
        'url' => '/programs/professional-programs/registration-information',
        'text' => 'Registration Information',
      ]
    ];

    if ($entity->classes->count() === 0) {
      // Remove the instructors link when there are no classes.
      unset($page_links[1]);
    }

    $build['ilr_course_page_links'] = [
      '#theme' => 'ilr_course_page_nav_block',
      '#node' => $entity,
      '#links' => $page_links,
    ];
  }

  if ($display->getComponent('media_outlet_logo') || $display->getComponent('media_outlet_name')) {
    $external_link_host = parse_url($entity->field_external_link->uri, PHP_URL_HOST);

    // Derive a media outlet logo domain name (e.g. `nytimes.com`,
    // `bloomberg.com`) from the link host by removing the (optional) `www.`
    // prefix from the hostname. See https://regex101.com/r/XvagCu/4/ to test
    // this regex.
    if (preg_match('/^(www\.)?(([^\.]+)\.[a-z]{2,4})$/', $external_link_host, $matches)) {
      // Find a logo media entity with a domain name that matches.
      $entity_type_manager = \Drupal::service('entity_type.manager');
      $logos = $entity_type_manager->getStorage('media')->loadByProperties([
        'bundle' => 'logo',
        'field_website_domain_name' => $matches[2],
        'status' => 1,
      ]);

      $logo = $logos ? reset($logos) : FALSE;
    }
  }

  if ($display->getComponent('media_outlet_logo')) {
    $build['media_outlet_logo'] = [
      '#cache' => [
        'tags' => ['media_list'],
      ],
    ];

    if (!empty($logo)) {
      $build['media_outlet_logo']['logo'] = $logo->field_media_image->view('default');
    }
  }

  if ($display->getComponent('media_outlet_name')) {
    $build['media_outlet_name'] = [
      '#cache' => [
        'tags' => ['media_list'],
      ],
    ];

    if (!empty($logo)) {
      $build['media_outlet_name'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="media-mention__outlet">{{name}}</div>',
        '#context' => ['name' => $logo->label()],
      ];
    }
  }
}

/**
 * Implements hook_entity_prepare_view().
 */
function ilr_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {
  if (empty($entities)) {
    return;
  }

  // Use a default value for course `field_message` if empty. This means that
  // courses can either use the default message as defined in the custom block
  // _or_ override that value. They cannot disable the message completely.
  if ($entity_type_id === 'node') {
    foreach ($entities as $node) {
      if ($node->bundle() === 'course' && $node->field_message->isEmpty()) {
        $default_message_block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', '280c1d2d-0456-45eb-84dc-d114c5e7b2fa');

        if ($default_message_block) {
          $node->field_message->value = $default_message_block->body->value;
          $node->field_message->format = $default_message_block->body->format;
        }
      }
    }
  }

  if ($entity_type_id === 'paragraph') {
    foreach ($entities as $paragraph) {
      $paragraph->include_button = TRUE; // You can do this!?
      $paragraph->cu_icon = [];

      // Use data values from existing content (if specified) in promos.
      if ($paragraph->bundle() === 'promo' && !$paragraph->field_content->isEmpty()) {
        $content = $paragraph->field_content->entity;

        if ($content->getEntityTypeId() === 'persona') {
          $heading = $content->getDisplayName();
          $body = $content->field_bio->summary;
          $media = $content->hasField('field_photo') ? $content->field_photo : NULL;
          $paragraph->cu_icon = [
            'title' => 'Persona',
            'label' => 'Spotlight',
            'icon' => 'student',
            'attributes' => ['class' => 'cu-icon--color-light'],
          ];
        }
        else {
          $heading = $content->label();
          $body = $content->body->summary;
          $media = $content->hasField('field_representative_image') ? $content->field_representative_image : NULL;
        }

        if ($paragraph->field_heading->isEmpty()) {
          $paragraph->field_heading->value = $heading;
        }

        if ($paragraph->field_body->isEmpty()) {
          $paragraph->field_body->value = $body;
        }

        if ($paragraph->field_media->isEmpty() && !$media->isEmpty()) {
          $paragraph->field_media->target_id = $media->target_id;
        }

        if ($paragraph->field_link->isEmpty()) {
          $paragraph->field_link = [
            'uri' => 'entity:' . $content->toUrl()->getInternalPath(),
            'title' => t('Read more about') . ' ' . $paragraph->field_heading->value,
          ];
          $paragraph->include_button = FALSE;
        }
      }

      if ($paragraph->bundle() === 'promo' && !$paragraph->field_media->isEmpty() && !$paragraph->field_suppress_media->isEmpty() && $paragraph->field_suppress_media->value) {
        $paragraph->field_media->removeItem(0);
      }
    }
  }
}

/**
 * Implements hook_query_alter().
 *
 * De-dupe grouped queries during the same request.
 *
 * Queries can be tagged for de-duping by setting a query tag in a specific
 * colon-delimited format:
 *
 * `dedupe:ID_FIELD:GROUP_ID`
 *
 * For example, all post listings are grouped by their collection, so the dedupe
 * group for collection 2 would be:
 *
 * `dedupe:collection_item.id:collection_2`
 *
 * Every query with that same tag will be deduped during a given request.
 *
 * NOTE: This will alter the SelectQuery that is compiled from the EntityQuery
 * such as \Drupal\ilr\Plugin\paragraphs\Behavior\PostListing::preprocess().
 * There is a contrib module that allows the altering of EntityQuery:
 * https://www.drupal.org/project/entity_query_alter.
 */
function ilr_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
  if ($query->hasTag('dedupe_clone') || empty($query->alterTags)) {
    return;
  }

  // Find the 'dedupe_group' and 'dedupe_id_field' for this query, if it has
  // one. `alterTags` is a protected property in QueryBase, but it seems we can
  // access it here anyway. Which is lucky for us!
  foreach (array_keys($query->alterTags) as $tag) {
    if (preg_match('/^dedupe:([^:]+):(.+)$/', $tag, $matches)) {
      $dedupe_group = $tag;
      $dedupe_id_field = $matches[1];
    }
  }

  if (empty($dedupe_group)) {
    return;
  }

  // Fetch previously returned ids.
  $cached_ids = &drupal_static(__FUNCTION__ . '_' . $dedupe_group, []);

  // Add a condition to filter out previously returned record ids. Since this
  // can be a SelectQuery transformed from and EntityQuery, we can't use a
  // condition field name like `id` as we would in an original query like the
  // one in PostListing::preprocess.
  if (!empty($cached_ids)) {
    $query->condition($dedupe_id_field, $cached_ids, 'NOT IN');
  }

  // Clone this query so we can execute it without interfering with the
  // original. Plus, tag it to prevent an endless loop of this hook.
  $clone = clone $query;
  $clone->addTag('dedupe_clone');

  // Execute the clone and append the record ids from this query to the cache.
  $cached_ids = array_merge($cached_ids, $clone->execute()->fetchAllKeyed());
}

/**
 * Implements template_preprocess_node().
 *
 */
function ilr_preprocess_node__course__teaser(&$variables) {
  $variables['upcoming_classes'] = [];

  foreach ($variables['node']->classes as $upcoming_class) {
    if (!$upcoming_class->entity->field_class_cancelled->value) {
      $variables['upcoming_classes'][] = $upcoming_class->entity;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 */
function ilr_collection_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $collection = $entity;

  if ($collection->bundle() !== 'publication_issue' || $view_mode !== 'full') {
    return;
  }

  if ($collection->field_featured_story->isEmpty()) {
    return;
  }

  $dedupe_group = 'dedupe:collection_item.id:collection_' . $collection->id();
  $collection_item_storage = \Drupal::service('entity_type.manager')->getStorage('collection_item');
  $query = $collection_item_storage->getQuery();
  $query->condition('collection', $collection->id());
  $query->condition('type', 'publication_issue');
  $query->condition('item.entity:node.status', 1);
  $query->condition('item.entity:node.nid', $collection->field_featured_story->target_id);
  // Add a dedupe tag to remove duplicates in similar story listings. See
  // ilr_query_alter().
  $query->addTag($dedupe_group);
  $result = $query->execute();
}

/**
 * Implements hook_token_info().
 */
function ilr_token_info() {
  $info = [];
  $info['tokens']['paragraph']['parent_entity_label'] = [
    'name' => 'Parent Entity Label',
    'description' => 'The label of the paragraph parent entity.'
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function ilr_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'paragraph' && !empty($data['paragraph'])) {
    $host_entity = $data['paragraph']->getParentEntity();

    foreach ($tokens as $name => $token) {
      if ($name === 'parent_entity_label') {
        $replacements[$token] = $host_entity->label();
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'certificate') {
    $certificate_total = 0;
    $certificate_topics = [];

    // Deduce the total cost and topic terms of the certificate from its courses
    // (and classes).
    foreach ($entity->field_course->referencedEntities() as $course) {
      // Since `classes` is a computed field, and it is sorted by upcoming class
      // dates, using `first()` will ensure that the next upcoming class will be
      // used for the course price.
      if ($course->classes->count()) {
        $certificate_total += $course->classes->first()->entity->field_price->value;
      }

      // Add all unique topics for each course to the topics for certificate.
      foreach ($course->field_topics->referencedEntities() as $topic) {
        if (!in_array($topic->id(), $certificate_topics)) {
          $certificate_topics[] = $topic->id();
        }
      }
    }

    $entity->set('field_total_cost', $certificate_total);
    $entity->set('field_topics', $certificate_topics);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_taxonomy_term_presave(EntityInterface $entity) {
  // If this is a new topic, add some default page links to Certificates,
  // Programs, and Customized Programs.
  if ($entity->bundle() === 'topics' && $entity->isNew()) {
    $entity->set('field_page_links', [
      [
        'uri' => 'internal:#certificates',
        'title' => 'Certificates'
      ],
      [
        'uri' => 'internal:#programs',
        'title' => 'Programs'
      ],
      [
        'uri' => 'internal:/customized-programs',
        'title' => 'Customized Programs'
      ],
    ]);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['saml_login_title'] = [
    '#markup' => '<h2>' . t('Cornell Users') . '</h2>',
    '#weight' => -3
  ];

  $form['saml_login'] = [
    '#type' => 'link',
    '#url' => Url::fromRoute('samlauth.saml_controller_login'),
    '#title' => t('NetID Login'),
    '#weight' => -2,
    '#attributes' => [
      'class' => 'cu-button'
    ],
    '#attached' => [
      'library' => [
        'union_organizer/button'
      ]
    ]
  ];

  $form['drupal_login_title'] = [
    '#markup' => '<h2>' . t('No Cornell NetID?') . '</h2>',
    '#weight' => -1
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add a new node add/edit form advance group section. This is generally shown
  // in the right-hand column.
  /** @see Drupal\node\NodeForm */
  $form['ilr_meta'] = [
    '#type' => 'details',
    '#title' => t('Meta'),
    '#group' => 'advanced',
    '#weight' => -10,
    '#optional' => TRUE,
    '#open' => TRUE,
  ];

  // Move the representative image and page body fields into the new section.
  $form['field_representative_image']['#group'] = 'ilr_meta';

  if (!empty($form['field_representative_img_caption'])) {
    $form['field_representative_img_caption']['#group'] = 'ilr_meta';
  }

  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof \Drupal\node\NodeForm) {
    $node = $form_object->getEntity();

    if ($node->bundle() === 'page' || $node->bundle() === 'story') {
      $form['body']['#group'] = 'ilr_meta';
    }

    if (in_array($node->bundle(), ['post', 'media_mention'])) {
      $form['body']['#group'] = 'ilr_meta';
      $form['field_authors']['#group'] = 'ilr_meta';
      $form['field_experts']['#group'] = 'ilr_meta';
      $form['field_published_date']['#group'] = 'ilr_meta';
      $form['author']['#title'] = t('Creation information');
      $form['uid']['widget'][0]['target_id']['#title'] = t('Created by');
      $form['created']['widget'][0]['value']['#title'] = t('Created on');
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ilr_field_widget_paragraphs_form_alter(&$element, FormStateInterface &$form_state, $context) {
  $paragraphs_entity = NULL;
  $delta = $element['#delta'];
  $field_name = $context['items']->getName();
  $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $field_name, $form_state);

  // Load the paragraph entity if possible.
  /** @see \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget::formElement() */
  if (isset($widget_state['paragraphs'][$delta]['entity'])) {
    $paragraphs_entity = $widget_state['paragraphs'][$delta]['entity'];
  }
  elseif (isset($context['items'][$delta]->entity)) {
    $paragraphs_entity = $context['items'][$delta]->entity;
  }

  // Section paragraph types should show the heading as the label if the heading
  // has a value.
  if ($paragraphs_entity && $paragraphs_entity->bundle() === 'section' && $heading = $paragraphs_entity->field_heading->value) {
    $element['top']['type']['label']['#markup'] = '<span class="paragraph-type-label">' . $heading . '</span>';
  }

  // Hide the subheading and subheading link on section paragraphs until the
  // heading has a value.
  if ($paragraphs_entity && $paragraphs_entity->bundle() === 'section' && isset($element['subform']['field_heading'])) {
    $selector = sprintf(':input[name="%s[%d][subform][field_heading][0][value]"]', $field_name, $delta);
    $element['subform']['field_subheading']['#states'] = [
      'invisible' => [
        $selector => ['value' => ''],
      ],
    ];
    $element['subform']['field_subheading_link']['#states'] = [
      'invisible' => [
        $selector => ['value' => ''],
      ],
    ];

    // Change the the subheading link field to a details element so it will be
    // collapsed by default.
    $element['subform']['field_subheading_link']['widget'][0]['#type'] = 'details';
  }

  // Move non-section paragraph behaviors below the content fields subform.
  if ($paragraphs_entity && $paragraphs_entity->bundle() !== 'section' && isset($element['behavior_plugins'])) {
    unset($element['behavior_plugins']['#weight']);
  }

  // Wrap behavior settings elements in a details container.
  if (!empty($element['behavior_plugins'])) {
    $element['behavior_plugins']['#type'] = 'details';
    $element['behavior_plugins']['#title'] = t('Settings');
  }

  // Add a class to closed paragraphs.
  $element['#attributes']['class'] = ['js-paragraph-mode--' . ($widget_state['paragraphs'][$delta]['mode'] ?? 'missing')];

  // If it's a promo, combine relevant fields in a details box for existing
  // content.
  if ($paragraphs_entity && $paragraphs_entity->bundle() === 'promo') {
    if (isset($element['subform']['field_content'])) {
      $group_selector = implode('][', array_merge($element['subform']['#parents'], ['ilr_content_wrapper']));

      $element['subform']['ilr_content_wrapper'] = [
        '#type' => 'details',
        '#title' => $element['subform']['field_content']['widget'][0]['#title'],
        '#weight' => $element['subform']['field_content']['#weight'],
        '#open' => !$paragraphs_entity->field_content->isEmpty(),
      ];

      $element['subform']['field_content']['widget'][0]['#type'] = 'container';
      $element['subform']['field_content']['#group'] = $group_selector;
      $element['subform']['field_suppress_media']['#group'] = $group_selector;
    }

    // Collapse the button (link) field if there is no value.
    if (isset($element['subform']['field_link'])) {
      $element['subform']['field_link']['widget'][0]['#type'] = 'details';
      $element['subform']['field_link']['widget'][0]['#open'] = !$paragraphs_entity->field_link->isEmpty();
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ilr_field_widget_paragraphs_previewer_form_alter(&$element, FormStateInterface &$form_state, $context) {
  ilr_field_widget_paragraphs_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ilr_field_widget_text_textarea_with_summary_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();

  // Base fields are not configurable.
  if (!$field_definition instanceof Drupal\field\Entity\FieldConfig) {
    return;
  }

  // We can't use the protected isDefaultValueWidget() method.
  $is_default_value_widget = (bool) $form_state->get('default_value_widget');
  $entity_type_and_bundle = $field_definition->get('entity_type') . ':' . $field_definition->get('bundle');

  if (!$is_default_value_widget) {
    if (in_array($entity_type_and_bundle, ['node:post', 'node:media_mention'])) {
      unset($element['summary']['#description']);
    }

    // Always show the summary field.
    unset($element['summary']['#attached']);
  }
}

/**
 * Implements hook_user_format_name_alter().
 *
 * Display the common name, if available, as the username.
 */
function ilr_user_format_name_alter(&$name, $account) {
  if ($account instanceof \Drupal\user\Entity\User === FALSE) {
    return;
  }

  if (!$account->field_common_name->isEmpty()) {
    $name = $account->field_common_name->value;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the collection new node form to add a subsite menu option.
 *
 * @see CollectionNewNodeForm::buildForm()
 */
function ilr_form_collection_new_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\collection\Entity\CollectionInterface $collection */
  $collection = $form_state->get('collection');

  if ($collection->bundle() === 'blog') {
    $form['bundle']['#default_value'] = 'post';
    $form['bundle']['#options'] = [
      'post' => 'Post',
      'media_mention' => 'Media mention',
      'page' => 'Page',
    ];
  }

  if ($collection->bundle() === 'publication_issue') {
    $form['bundle']['#default_value'] = 'story';
    $form['bundle']['#options'] = [
      'story' => 'Story',
      'media_mention' => 'Media mention',
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_collection_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['body']) || isset($form['field_representative_image'])) {
    $form['ilr_meta'] = [
      '#type' => 'details',
      '#title' => t('Meta'),
      '#group' => 'advanced',
      '#weight' => 0,
      '#optional' => TRUE,
      '#open' => TRUE,
    ];

    if (isset($form['field_representative_image'])) {
      $form['field_representative_image']['#group'] = 'ilr_meta';
    }

    if (!empty($form['field_download'])) {
      $form['field_download']['#group'] = 'ilr_meta';
    }

    if (!empty($form['field_publication_date'])) {
      $form['field_publication_date']['#group'] = 'ilr_meta';
    }

    if (isset($form['body'])) {
      $form['body']['#group'] = 'ilr_meta';
    }
  }

}

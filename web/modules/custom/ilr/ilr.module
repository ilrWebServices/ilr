<?php

/**
 * @file
 * Contains ilr.module.
 */

use \Drupal\Core\Entity\EntityTypeInterface;
use \Drupal\ilr\FieldStorageDefinition;
use \Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_theme().
 */
function ilr_theme($existing, $type, $theme, $path) {
  return [
    'ilr_class_register_block' => [
      'variables' => [
        'classes' => [],
      ],
    ],
    'ilr_course_page_nav_block' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_entity_field_storage_info().
 */
function ilr_entity_field_storage_info(EntityTypeInterface $entity_type) {
  $definitions = [];

  if ($entity_type->id() == 'node') {
    $definitions['classes'] = FieldStorageDefinition::create('entity_reference')
      ->setName('classes')
      ->setLabel(t('Classes'))
      ->setRevisionable(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
  }

  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function ilr_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'node' && $bundle == 'course') {
    $fields = [];

    $custom_field_storage = ilr_entity_field_storage_info($entity_type);

    $fields[$custom_field_storage['classes']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['classes']);

    $fields[$custom_field_storage['classes']->getName()]
      ->setLabel(t('Classes'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseClassItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'class' => 'class'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => -5,
      ]);

    return $fields;
  }
}

/**
 * Implements template_preprocess_node().
 *
 */
function ilr_preprocess_node__course__teaser(&$variables) {
  $variables['class_count'] = $variables['node']->classes->count();
  $variables['course_details'] = [];

  if ($variables['class_count']) {
    $next_class = $variables['node']->classes->first()->entity;
    $variables['course_details'][] = $next_class->field_date_start->date->format('M j, Y');
    $variables['course_details'][] = $next_class->field_price->getString();
  }
}

/**
 * Implements hook_token_info().
 */
function ilr_token_info() {
  $info = [];
  $info['tokens']['paragraph']['parent_entity_label'] = [
    'name' => 'Parent Entity Label',
    'description' => 'The label of the paragraph parent entity.'
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function ilr_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'paragraph' && !empty($data['paragraph'])) {
    $host_entity = $data['paragraph']->getParentEntity();

    foreach ($tokens as $name => $token) {
      if ($name === 'parent_entity_label') {
        $replacements[$token] = $host_entity->label();
      }
    }
  }

  return $replacements;
}

<?php

/**
 * @file
 * Contains ilr.module.
 */

use Drupal\address\Plugin\Field\FieldWidget\AddressDefaultWidget;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\ilr\FieldStorageDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Field\Entity\BaseFieldOverride;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Cache\Cache;
use Drupal\webform\Plugin\WebformHandlerInterface;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\file\FileInterface;
use Drupal\pathauto\PathautoPatternInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\taxonomy\VocabularyInterface;
use Drupal\collection\Entity\CollectionItemInterface;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\ilr\Entity\ImageMedia;

/**
 * Implements hook_theme().
 */
function ilr_theme($existing, $type, $theme, $path) {
  return [
    'ilr_certificate_basics_block' => [
      'variables' => [
        'node' => [],
      ],
    ],
    'ilr_class_register_block' => [
      'variables' => [
        'classes' => [],
      ],
    ],
    'ilr_course_instructors_block' => [
      'variables' => [
        'label' => '',
        'instructors' => [],
      ],
    ],
    'ilr_course_certificates_block' => [
      'variables' => [
        'node' => [],
        'certificates' => [],
      ],
    ],
    'ilr_course_page_nav_block' => [
      'variables' => [
        'node' => [],
        'links' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function ilr_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['media']['image'])) {
    $bundles['media']['image']['class'] = ImageMedia::class;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function ilr_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'collection_item') {
    $fields['sticky'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Sticky at top of lists'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDefaultValue(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 16,
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_entity_field_storage_info().
 */
function ilr_entity_field_storage_info(EntityTypeInterface $entity_type) {
  $definitions = [];

  if ($entity_type->id() == 'node') {
    $definitions['classes'] = FieldStorageDefinition::create('entity_reference')
      ->setName('classes')
      ->setLabel(t('Classes'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
    $definitions['certificates'] = FieldStorageDefinition::create('entity_reference')
      ->setName('certificates')
      ->setLabel(t('Certificates'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
    $definitions['sessions'] = FieldStorageDefinition::create('entity_reference')
      ->setName('sessions')
      ->setLabel(t('Sessions'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setTargetEntityTypeId($entity_type->id())
      ->setSetting('target_type', 'class_session');
  }

  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 *
 * - Add computed fields to course nodes.
 * - Refine the settings for the collection_item `item` field:
 *   - Allow `media` and `taxonomy_term` entities.
 *   - Restrict the bundles for all allowed entities.
 *   - @todo: Allow these settings to be configured per collection_item bundle
 *     via the UI.
 *  - Add computed fields to class nodes.
 */
function ilr_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];

  if ($entity_type->id() == 'node' && $bundle == 'course') {
    $custom_field_storage = ilr_entity_field_storage_info($entity_type);

    $fields[$custom_field_storage['classes']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['classes']);

    $fields[$custom_field_storage['classes']->getName()]
      ->setLabel(t('Classes'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseClassItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'class' => 'class'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => -5,
      ]);

    $fields[$custom_field_storage['certificates']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['certificates']);

    $fields[$custom_field_storage['certificates']->getName()]
      ->setLabel(t('Certificates'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseCertificateItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'certificate' => 'certificate'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', FALSE);
  }

  if ($entity_type->id() == 'node' && $bundle == 'class') {
    $custom_field_storage = ilr_entity_field_storage_info($entity_type);

    $fields[$custom_field_storage['sessions']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['sessions']);

    $fields[$custom_field_storage['sessions']->getName()]
      ->setLabel(t('Sessions'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\ClassSessionItemList')
      ->setSettings([
        'handler' => 'default:class_session',
        'handler_settings' => [
          'target_bundles' => NULL,
        ],
      ]);
  }

  return $fields;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function ilr_entity_bundle_field_info_alter(array &$fields, EntityTypeInterface $entity_type, $bundle ) {
  foreach ($fields as $field_name => $field) {
    if ($field->getType() === 'link') {
      // Add a ProblemInternalLink constraint to link fields.
      $fields[$field_name]->addConstraint('ProblemInternalLink');
    }
  }

  // Add the UniqueMediaMentionExternalLink constraint to the media mention link field.
  if (($entity_type->id() === 'node') && ($bundle === 'media_mention')) {
    if (isset($fields['field_external_link'])) {
      $fields['field_external_link']->addConstraint('UniqueMediaMentionExternalLink');
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ilr_entity_extra_field_info() {
  $extra = [];

  // Add a pseudo-field that can display the computed certificates field on this
  // course node. This will be exposed as a field block to layout builder.
  $extra['node']['course']['display']['ilr_certificates'] = [
    'label' => t('Certificates (computed)'),
    'description' => t('This is a computed backreference to certificates.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  // Add a pseudo-field that can display the course page links.
  $extra['node']['course']['display']['ilr_course_page_links'] = [
    'label' => t('Course Page Links (extra)'),
    'description' => t('A list of course page links.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  $extra['node']['media_mention']['display']['media_outlet_logo'] = [
    'label' => t('Media outlet logo'),
    'description' => t('The associated logo media entity image field.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  $extra['node']['media_mention']['display']['media_outlet_name'] = [
    'label' => t('Media outlet name'),
    'description' => t('The associated logo media entity name field.'),
    'weight' => 0,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ilr_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('ilr_certificates') && $view_mode === 'full') {
    $build['ilr_certificates'] = [
      '#theme' => 'ilr_course_certificates_block',
      '#node' => $entity,
      '#certificates' => $entity->certificates->referencedEntities(),
    ];
  }

  if ($display->getComponent('ilr_course_page_links') && $view_mode === 'full') {
    $page_links = [
      [
        'url' => '#course-details',
        'text' => 'Course Details',
      ],
      [
        'url' => '#instructors',
        'text' => 'The Instructors',
      ],
      [
        'url' => '#related-courses',
        'text' => 'Related Courses',
      ],
      [
        'url' => '/programs/professional-programs/registration-information',
        'text' => 'Registration Information',
      ]
    ];

    if ($entity->classes->count() === 0) {
      // Remove the instructors link when there are no classes.
      unset($page_links[1]);
    }

    $build['ilr_course_page_links'] = [
      '#theme' => 'ilr_course_page_nav_block',
      '#node' => $entity,
      '#links' => $page_links,
    ];
  }

  if ($display->getComponent('media_outlet_logo') || $display->getComponent('media_outlet_name')) {
    $external_link_host = parse_url($entity->field_external_link->uri, PHP_URL_HOST);

    // Derive a media outlet logo host and domain name (e.g. `nytimes.com`,
    // `bloomberg.com`) from the link host. See https://regex101.com/r/XvagCu/7
    // to test this regex.
    if (preg_match('/^(?:[^\.]+\.)*([^\.]+\.[a-z]{2,4})$/U', $external_link_host, $matches)) {
      $host = $matches[0];
      $domain = $matches[1];

      // Find logo media entities with a host or domain name that matches.
      $entity_type_manager = \Drupal::service('entity_type.manager');
      $logos = $entity_type_manager->getStorage('media')->loadByProperties([
        'bundle' => 'logo',
        'field_website_domain_name' => [$host, $domain],
        'status' => 1,
      ]);

      // Sort the logos by the best match. For example, prefer
      // `money.usnews.com` over `usnews.com`.
      uasort($logos, function($a, $b) use ($host, $domain) {
        $a_val = $a->field_website_domain_name->value;
        $b_val = $b->field_website_domain_name->value;
        $a_weight = $a_val === $host ? 0 : ($a_val === $domain ? 1 : 2);
        $b_weight = $b_val === $host ? 0 : ($b_val === $domain ? 1 : 2);
        return $a_weight <=> $b_weight;
      });

      $logo = $logos ? reset($logos) : FALSE;
    }
  }

  if ($display->getComponent('media_outlet_logo')) {
    $build['media_outlet_logo'] = [
      '#cache' => [
        'tags' => ['media_list'],
      ],
    ];

    if (!empty($logo)) {
      $build['media_outlet_logo']['logo'] = $logo->field_media_image->view('default');
    }
  }

  if ($display->getComponent('media_outlet_name')) {
    $build['media_outlet_name'] = [
      '#cache' => [
        'tags' => ['media_list'],
      ],
    ];

    if (!empty($logo)) {
      $build['media_outlet_name'] = [
        '#type' => 'inline_template',
        '#template' => '<div class="media-mention__outlet">{{name}}</div>',
        '#context' => ['name' => $logo->label()],
      ];
    }
  }
}

/**
 * Implements hook_entity_prepare_view().
 */
function ilr_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {
  if (empty($entities)) {
    return;
  }

  // Use a default value for course `field_message` if empty. This means that
  // courses can either use the default message as defined in the custom block
  // _or_ override that value. They cannot disable the message completely.
  if ($entity_type_id === 'node') {
    foreach ($entities as $node) {
      if ($node->bundle() === 'course' && $node->field_message->isEmpty()) {
        $default_message_block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', '280c1d2d-0456-45eb-84dc-d114c5e7b2fa');

        if ($default_message_block) {
          $node->field_message->value = $default_message_block->body->value;
          $node->field_message->format = $default_message_block->body->format;
        }
      }
    }
  }

  if ($entity_type_id === 'paragraph') {
    foreach ($entities as $paragraph) {
      $paragraph->include_button = TRUE; // You can do this!?
      $paragraph->cu_icon = [];

      // Use data values from existing content (if specified) in promos.
      if ($paragraph->bundle() === 'promo' && !$paragraph->field_content->isEmpty()) {
        $content = $paragraph->field_content->entity;

        if ($content->getEntityTypeId() === 'persona') {
          $heading = $content->getDisplayName();
          $body = $content->field_bio->summary;
          $media = $content->hasField('field_photo') ? $content->field_photo : NULL;
          $paragraph->cu_icon = [
            'title' => 'Persona',
            'label' => 'Spotlight',
            'icon' => 'student',
            'attributes' => ['class' => 'cu-icon--color-light'],
          ];
        }
        else {
          $heading = $content->label();
          $body = $content->body->summary;
          $media = $content->hasField('field_representative_image') ? $content->field_representative_image : NULL;
        }

        if ($paragraph->field_heading->isEmpty()) {
          $paragraph->field_heading->value = $heading;
        }

        if ($paragraph->field_body->isEmpty()) {
          $paragraph->field_body->value = $body;
        }

        if ($paragraph->field_media->isEmpty() && !$media->isEmpty()) {
          $paragraph->field_media->target_id = $media->target_id;
        }

        if ($paragraph->field_link->isEmpty()) {
          $paragraph->field_link = [
            'uri' => 'entity:' . $content->toUrl()->getInternalPath(),
            'title' => t('Read more about') . ' ' . $paragraph->field_heading->value,
          ];
          $paragraph->include_button = FALSE;
        }
      }

      if ($paragraph->bundle() === 'promo' && !$paragraph->field_media->isEmpty() && !$paragraph->field_suppress_media->isEmpty() && $paragraph->field_suppress_media->value) {
        $paragraph->field_media->removeItem(0);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Prevent access to paragraphs that reference unpublished content.
 */
function ilr_paragraph_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation === 'view' && $entity->hasField('field_content') && !$entity->field_content->isEmpty()) {
    return AccessResult::forbiddenIf(!$entity->field_content->entity->access('view', $account));
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_query_alter().
 *
 * De-dupe grouped queries during the same request.
 *
 * Queries can be tagged for de-duping by setting a query tag in a specific
 * colon-delimited format:
 *
 * `dedupe:ID_FIELD:GROUP_ID`
 *
 * For example, all post listings are grouped by their collection, so the dedupe
 * group for collection 2 would be:
 *
 * `dedupe:collection_item.id:collection_2`
 *
 * Every query with that same tag will be deduped during a given request.
 *
 * NOTE: This will alter the SelectQuery that is compiled from the EntityQuery
 * such as \Drupal\ilr\Plugin\paragraphs\Behavior\PostListing::preprocess().
 * There is a contrib module that allows the altering of EntityQuery:
 * https://www.drupal.org/project/entity_query_alter.
 */
function ilr_query_alter(AlterableInterface $query) {
  if ($query->hasTag('dedupe_clone') || empty($query->alterTags)) {
    return;
  }

  // Find the 'dedupe_group' and 'dedupe_id_field' for this query, if it has
  // one. `alterTags` is a protected property in QueryBase, but it seems we can
  // access it here anyway. Which is lucky for us!
  foreach (array_keys($query->alterTags) as $tag) {
    if (preg_match('/^dedupe:([^:]+):(.+)$/', $tag, $matches)) {
      $dedupe_group = $tag;
      $dedupe_id_field = $matches[1];
    }
  }

  if (empty($dedupe_group)) {
    return;
  }

  // Fetch previously returned ids.
  $cached_ids = &drupal_static(__FUNCTION__ . '_' . $dedupe_group, []);

  // Add a condition to filter out previously returned record ids. Since this
  // can be a SelectQuery transformed from and EntityQuery, we can't use a
  // condition field name like `id` as we would in an original query like the
  // one in PostListing::preprocess.
  if (!empty($cached_ids)) {
    $query->condition($dedupe_id_field, $cached_ids, 'NOT IN');
  }

  // Clone this query so we can execute it without interfering with the
  // original. Plus, tag it to prevent an endless loop of this hook.
  $clone = clone $query;
  $clone->addTag('dedupe_clone');

  // Pager queries have no fields, so we can't call fetchAllKeyed().
  if (empty($clone->getFields())) {
    return;
  }

  // Execute the clone and append the record ids from this query to the cache.
  $cached_ids = array_merge($cached_ids, $clone->execute()->fetchAllKeyed());
}

/**
 * Implements hook_query_TAG_alter().
 */
function ilr_query_collection_items_for_entity_alter(AlterableInterface $query) {
  // Sort collection items for entities, as listed on the Collections tab for a
  // content entity, and in the inline collection item forms.
  $query->orderBy('canonical', 'desc');
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function ilr_taxonomy_term_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $vocabulary_entity = \Drupal::service('entity_type.manager')->getStorage('taxonomy_vocabulary')->load($entity_bundle);

  // See if the vocabulary is in a collection owned by this user.
  $collection_items = \Drupal::service('collection.content_manager')->getCollectionItemsForEntity($vocabulary_entity, FALSE);

  foreach ($collection_items as $collection_item) {
    if ($collection_item->access('update', $account)) {
      return AccessResult::allowed();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements template_preprocess_node().
 */
function ilr_preprocess_node__course__teaser(&$variables) {
  $variables['upcoming_classes'] = [];

  foreach ($variables['node']->classes as $upcoming_class) {
    $class_is_in_person = strpos(strtolower($upcoming_class->entity->field_delivery_method->value), 'online') === FALSE;

    switch($upcoming_class->entity->field_delivery_method->value) {
      case 'Classroom':
        $computed_delivery_method = t('In-Person');
        break;
      case 'On Demand/Self Paced':
        $computed_delivery_method = t('Self-Paced Online');
        break;
      default:
        $computed_delivery_method = t('Live Online');
    }

    $upcoming_class->entity->computed_delivery_method = $computed_delivery_method;
    $variables['upcoming_classes'][] = $upcoming_class->entity;
  }
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * Add the paragraphs id as a data attribute.
 * @see ParagraphsHostEntity::host drush command.
 */
function ilr_preprocess_paragraph(&$variables) {
  $variables['attributes']['data-pid'][] = $variables['paragraph']->id();
}

/**
 * Implements hook_token_info().
 */
function ilr_token_info() {
  $info = [];
  $info['tokens']['paragraph']['parent_entity_label'] = [
    'name' => 'Parent Entity Label',
    'description' => 'The label of the paragraph parent entity.'
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function ilr_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'paragraph' && !empty($data['paragraph'])) {
    $host_entity = $data['paragraph']->getParentEntity();

    foreach ($tokens as $name => $token) {
      if ($name === 'parent_entity_label') {
        $replacements[$token] = $host_entity->label();
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_entity_type_alter().
 */
function ilr_entity_type_alter(array &$entity_types) {
  $entity_types['node']->addConstraint('NodeMenuLevel');
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'certificate') {
    $certificate_total = 0;
    $certificate_topics = [];

    // Deduce the total cost and topic terms of the certificate from its courses
    // (and classes).
    foreach ($entity->field_course->referencedEntities() as $course) {
      // Since `classes` is a computed field, and it is sorted by upcoming class
      // dates, using `first()` will ensure that the next upcoming class will be
      // used for the course price.
      if ($course->classes->count()) {
        $certificate_total += $course->classes->first()->entity->field_price->value;
      }

      // Add all unique topics for each course to the topics for certificate.
      foreach ($course->field_topics->referencedEntities() as $topic) {
        if (!in_array($topic->id(), $certificate_topics)) {
          $certificate_topics[] = $topic->id();
        }
      }
    }

    $entity->set('field_total_cost', $certificate_total);
    $entity->set('field_topics', $certificate_topics);
  }

  if ($entity->bundle() === 'class' && !$entity->field_course->isEmpty()) {
    Cache::invalidateTags($entity->field_course->entity->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_taxonomy_term_presave(EntityInterface $entity) {
  // If this is a new topic, add some default page links to Certificates,
  // Programs, and Customized Programs.
  if ($entity->bundle() === 'topics' && $entity->isNew()) {
    $entity->set('field_page_links', [
      [
        'uri' => 'internal:#certificates',
        'title' => 'Certificates'
      ],
      [
        'uri' => 'internal:#programs',
        'title' => 'Programs'
      ],
      [
        'uri' => 'internal:/customized-programs',
        'title' => 'Customized Programs'
      ],
    ]);
  }

  // Automatically create a new revision since there is no UI.
  // @see https://www.drupal.org/project/drupal/issues/2936995
  $entity->setNewRevision(TRUE);
  $entity->setRevisionUserId(\Drupal::currentUser()->id());
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function ilr_media_load(array $entities) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $users = $entity_type_manager->getStorage('user')->getQuery()->execute();

  foreach ($entities as $entity) {
    if (!in_array($entity->uid->target_id, $users)) {
      $entity->uid = 1;
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['saml_login_title'] = [
    '#markup' => '<h2>' . t('Cornell Users') . '</h2>',
    '#weight' => -3
  ];

  $form['saml_login'] = [
    '#type' => 'link',
    '#url' => Url::fromRoute('samlauth.saml_controller_login'),
    '#title' => t('NetID Login'),
    '#weight' => -2,
    '#attributes' => [
      'class' => 'cu-button'
    ],
    '#attached' => [
      'library' => [
        'union_organizer/button'
      ]
    ]
  ];

  $form['drupal_login_container_open'] = [
    '#markup' => '<details><summary>' . t('No Cornell NetID?') . '</summary>',
    '#weight' => -1
  ];

  $form['drupal_login_container_close'] = [
    '#markup' => '</details><p></p>',
    '#weight' => 100
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add a new node add/edit form advance group section. This is generally shown
  // in the right-hand column.
  /** @see Drupal\node\NodeForm */
  $form['ilr_meta'] = [
    '#type' => 'details',
    '#title' => t('Meta'),
    '#group' => 'advanced',
    '#weight' => -10,
    '#optional' => TRUE,
    '#open' => TRUE,
  ];

  // Move the representative image and page body fields into the new section.
  $form['field_representative_image']['#group'] = 'ilr_meta';

  // Put inline collection item forms in the 'sidebar' on node add/edit forms.
  $form['ief_collection_items']['#group'] = 'advanced';

  if (!empty($form['field_representative_img_caption'])) {
    $form['field_representative_img_caption']['#group'] = 'ilr_meta';
  }

  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof \Drupal\node\NodeForm) {
    $node = $form_object->getEntity();

    if ($node->bundle() === 'page' || $node->bundle() === 'story') {
      $form['body']['#group'] = 'ilr_meta';
    }

    if ($node->type->entity->getThirdPartySetting('extended_post', 'extends_posts')) {
      $form['body']['#group'] = 'ilr_meta';
      $form['field_authors']['#group'] = 'ilr_meta';
      $form['field_experts']['#group'] = 'ilr_meta';
      $form['field_published_date']['#group'] = 'ilr_meta';
      $form['author']['#title'] = t('Creation information');
      $form['uid']['widget'][0]['target_id']['#title'] = t('Created by');
      $form['created']['widget'][0]['value']['#title'] = t('Created on');
    }

    if ($node->bundle() === 'course') {
      $form['field_message']['#group'] = 'ilr_meta';
      $form['field_delivery_method']['#group'] = 'ilr_meta';
      $form['field_sponsor']['#group'] = 'ilr_meta';
      $form['field_topics']['#group'] = 'ilr_meta';
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ilr_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (isset($context['widget']) && $context['widget'] instanceof AddressDefaultWidget) {
    $element['#type'] = 'container';
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ilr_field_widget_paragraphs_form_alter(&$element, FormStateInterface &$form_state, $context) {
  $paragraphs_entity = NULL;
  $delta = $element['#delta'];
  $field_name = $context['items']->getName();
  $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $field_name, $form_state);

  // Load the paragraph entity if possible.
  /** @see \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget::formElement() */
  if (isset($widget_state['paragraphs'][$delta]['entity'])) {
    $paragraphs_entity = $widget_state['paragraphs'][$delta]['entity'];
  }
  elseif (isset($context['items'][$delta]->entity)) {
    $paragraphs_entity = $context['items'][$delta]->entity;
  }

  // Section paragraph types should show the heading as the label if the heading
  // has a value.
  if ($paragraphs_entity && $paragraphs_entity->bundle() === 'section') {
    if ($heading = $paragraphs_entity->field_heading->value) {
      $element['top']['type']['label']['#markup'] = '<span class="paragraph-type-label">' . $heading . '</span>';
    }
    else {
      $admin_label = $paragraphs_entity->getBehaviorSetting('admin_section_label', 'label') ?? t('Section');
      $element['top']['type']['label']['#markup'] = '<span class="paragraph-type-label paragraph-type-label--admin-label">' . $admin_label . '</span>';
    }

  }

  // Hide the subheading and subheading link on section paragraphs until the
  // heading has a value.
  if ($paragraphs_entity && $paragraphs_entity->bundle() === 'section' && isset($element['subform']['field_heading'])) {
    $selector = sprintf(':input[name="%s[%d][subform][field_heading][0][value]"]', $field_name, $delta);
    $element['subform']['field_subheading']['#states'] = [
      'invisible' => [
        $selector => ['value' => ''],
      ],
    ];
    $element['subform']['field_subheading_link']['#states'] = [
      'invisible' => [
        $selector => ['value' => ''],
      ],
    ];

    // Change the the subheading link field to a details element so it will be
    // collapsed by default.
    $element['subform']['field_subheading_link']['widget'][0]['#type'] = 'details';
  }

  // Remove the weight value from the behavior_plugins element to help detect if
  // it's empty.
  unset($element['behavior_plugins']['#weight']);

  // Wrap behavior settings elements in a details container.
  if (!empty($element['behavior_plugins'])) {
    $element['behavior_plugins']['#type'] = 'details';
    $element['behavior_plugins']['#title'] = t('@type Settings', [
      '@type' => $paragraphs_entity->type->entity->label(),
    ]);
    $element['behavior_plugins']['#weight'] = -99;
  }

  // Add a class to closed paragraphs.
  $element['#attributes']['class'] = ['js-paragraph-mode--' . ($widget_state['paragraphs'][$delta]['mode'] ?? 'missing')];

  // If it's a promo, combine relevant fields in a details box for existing
  // content.
  if ($paragraphs_entity && $paragraphs_entity->bundle() === 'promo') {
    if (isset($element['subform']['field_content'])) {
      $group_selector = implode('][', array_merge($element['subform']['#parents'], ['ilr_content_wrapper']));

      $element['subform']['ilr_content_wrapper'] = [
        '#type' => 'details',
        '#title' => $element['subform']['field_content']['widget'][0]['#title'],
        '#weight' => $element['subform']['field_content']['#weight'],
        '#open' => !$paragraphs_entity->field_content->isEmpty(),
      ];

      $element['subform']['field_content']['widget'][0]['#type'] = 'container';
      $element['subform']['field_content']['#group'] = $group_selector;
      $element['subform']['field_suppress_media']['#group'] = $group_selector;
    }

    // Collapse the button (link) field if there is no value.
    if (isset($element['subform']['field_link'])) {
      $element['subform']['field_link']['widget'][0]['#type'] = 'details';
      $element['subform']['field_link']['widget'][0]['#open'] = !$paragraphs_entity->field_link->isEmpty();
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ilr_field_widget_paragraphs_previewer_form_alter(&$element, FormStateInterface &$form_state, $context) {
  ilr_field_widget_paragraphs_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function ilr_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  if ($field_definition->getType() === 'text_with_summary') {
    $element = [];

    $element['hide_value'] = [
      '#type' => 'checkbox',
      '#title' => t('Hide the main text input field'),
      '#description' => t('Only useful when the summary field is displayed.'),
      '#default_value' => $plugin->getThirdPartySetting('ilr', 'hide_value'),
    ];

    // The summary description only appears if the summary is not required.
    if (!$field_definition->getSetting('required_summary')) {
      $element['hide_summary_description'] = [
        '#type' => 'checkbox',
        '#title' => t('Hide the summary description'),
        '#default_value' => $plugin->getThirdPartySetting('ilr', 'hide_summary_description'),
      ];
    }

    return $element;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ilr_field_widget_text_textarea_with_summary_form_alter(&$element, FormStateInterface $form_state, $context) {
  $widget = $context['widget'];

  // We can't use the protected isDefaultValueWidget() method.
  if ((bool) $form_state->get('default_value_widget')) {
    return;
  }

  if ($widget->getThirdPartySetting('ilr', 'hide_summary_description')) {
    unset($element['summary']['#description']);
  }

  if ($widget->getThirdPartySetting('ilr', 'hide_value')) {
    $element['#ilr_hide_value'] = TRUE;
    $element['#after_build'][] = '_ilr_disable_textarea_value';
  }
}

/**
 * The #after_build callback for text_with_summary widgets.
 */
function _ilr_disable_textarea_value($form_element, FormStateInterface $form_state) {
  if ($form_element['#ilr_hide_value'] && isset($form_element['value'])) {
    $form_element['value']['#access'] = FALSE;
  }

  return $form_element;
}

/**
 * Implements hook_user_format_name_alter().
 *
 * Display the common name, if available, as the username.
 */
function ilr_user_format_name_alter(&$name, $account) {
  if ($account instanceof \Drupal\user\Entity\User === FALSE) {
    return;
  }

  if (!$account->field_common_name->isEmpty()) {
    $name = $account->field_common_name->value;
  }
}

/**
 * Implements hook_preprocess_HOOK() for `entity_add_list`.
 *
 * Hide some bundles from the 'Add new content' page for blog collections.
 *
 * @see CollectionNew::content().
 */
function ilr_preprocess_entity_add_list__collection_blog_new_node(&$variables) {
  unset($variables['bundles']['certificate']);
  unset($variables['bundles']['course']);
  unset($variables['bundles']['story']);
}

/**
 * Implements hook_preprocess_HOOK() for `entity_add_list`.
 *
 * Hide some bundles from the 'Add new content' page for subsite_blog
 * collections.
 *
 * @see CollectionNew::content().
 */
function ilr_preprocess_entity_add_list__collection_subsite_blog_new_node(&$variables) {
  unset($variables['bundles']['certificate']);
  unset($variables['bundles']['course']);
  unset($variables['bundles']['story']);
}

/**
 * Implements hook_preprocess_HOOK() for `entity_add_list`.
 *
 * Hide some bundles from the 'Add new content' page for content_section
 * collections.
 *
 * @see CollectionNew::content().
 */
function ilr_preprocess_entity_add_list__collection_content_section_new_node(&$variables) {
  unset($variables['bundles']['certificate']);
  unset($variables['bundles']['course']);
  unset($variables['bundles']['media_mention']);
  unset($variables['bundles']['story']);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_collection_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['body']) || isset($form['field_representative_image'])) {
    $form['ilr_meta'] = [
      '#type' => 'details',
      '#title' => t('Meta'),
      '#group' => 'advanced',
      '#weight' => 0,
      '#optional' => TRUE,
      '#open' => TRUE,
    ];

    if (isset($form['field_representative_image'])) {
      $form['field_representative_image']['#group'] = 'ilr_meta';
    }

    if (isset($form['field_suppress_date_display'])) {
      $form['field_suppress_date_display']['#group'] = 'ilr_meta';
    }

    if (!empty($form['field_download'])) {
      $form['field_download']['#group'] = 'ilr_meta';
    }

    if (!empty($form['field_publication_date'])) {
      $form['field_publication_date']['#group'] = 'ilr_meta';
    }

    if (isset($form['body'])) {
      $form['body']['#group'] = 'ilr_meta';
    }

    if (isset($form['field_section_path'])) {
      $form['field_section_path']['#group'] = 'ilr_meta';
    }
  }

  // Enable new revisions by default.
  $form['revision']['#default_value'] = TRUE;
}

/**
 * Implements hook_webform_mailchimp_lists_mergevars_alter().
 *
 * The datelist value should only send a 4 character year string to the MC api,
 * so we transform it here.
 */
function ilr_webform_mailchimp_lists_mergevars_alter(&$mergevars, WebformSubmissionInterface $submission, WebformHandlerInterface $handler) {
  $data = $submission->getData();

  if (!empty($data['degree_year'])) {
    $mergevars['GRADYEAR'] = substr($data['degree_year'], 0, 4);
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function ilr_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  // Alter the pattern for page nodes that aren't in the menu.
  if ($pattern->id() === 'page_nodes') {
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    $links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $context['data']['node']->id()]);

    if ($links) {
      // If this page node is in a menu, use a menu-parent based pattern.
      return $pattern->setPattern('[node:menu-link:parent:url:relative]/[node:menu-link:title]');
    }
  }
}

/**
 * Implements hook_collection_pathauto_alias_alter().
 *
 * Updates the alias pattern for story nodes that in a publication_issue
 * collection.
 *
 * @see collection_pathauto_pathauto_alias_alter().
 */
function ilr_collection_pathauto_alias_alter(&$alias, array &$context) {
  if ($context['canonical_collection']->bundle() === 'publication_issue' && $context['data']['node']->bundle() === 'story') {
    $alias = str_replace('/story/', '/', $alias);
  }

  // Page nodes have their path patterns altered if they are in a menu (see
  // ilr_pathauto_pattern_alter()). Under certain conditions, like when the menu
  // parent has the collection prefix in it, this can result in a duplicated
  // collection path prefix. We remove that here.
  if ($context['pattern']->id() === 'page_nodes') {
    // Remove the original_alias from the end of the current alias. Whatever is
    // left is the collection path that was prepended in
    // collection_pathauto_pathauto_alias_alter().
    $collection_path = preg_replace("|{$context['original_alias']}$|", '', $alias);

    // Reduce the collection paths to a single value if the current alias starts
    // with two collection paths.
    $deduped_alias = preg_replace("|^{$collection_path}{$collection_path}/|", $collection_path . '/', $alias);
    $alias = $deduped_alias;
  }
}

/**
 * Implements hook_file_validate().
 *
 * Checks for duplicate file uploads and creates a message used in js to find
 * the duplicate in the library.
 *
 * NOTE: The message of the text matters, since the js uses the filename. Also,
 * this replaces the experimental duplicate detection in the filehash module.
 *
 * @see union_admin.media.enhancements.js
 * @see filehash.module
 */
function ilr_file_validate(FileInterface $file) {
  $module_handler = \Drupal::service('module_handler');

  if (!$module_handler->moduleExists('filehash')) {
    return;
  }

  $errors = [];

  // We only run the dedupe check on initial file creation.
  if (!$file->id()) {
    foreach (filehash_algos() as $algo) {
      $query = \Drupal::database()->select('filehash');
      $query->addField('filehash', 'fid');
      $query->condition($algo, $file->filehash[$algo]);
      $query->range(0, 1);

      if ($fid = $query->execute()->fetchField()) {
        $entity_type_manager = \Drupal::service('entity_type.manager');
        $file = \Drupal::entityTypeManager()->getStorage('file')->load($fid);
        $duplicate_media_entities = \Drupal::service('file.usage')->listUsage($file);

        if (empty($duplicate_media_entities)) {
          return;
        }

        foreach ($duplicate_media_entities['file']['media'] as $media_id => $usage_count) {
          if ($media = \Drupal::entityTypeManager()->getStorage('media')->load($media_id)) {
            $error = t('This file has already been uploaded to the media library with the name "%media_name".', [
              '%media_name' => $media->label(),
            ]);
            $errors[] = $error;
          }
        }
      }
    }
  }

  return $errors;
}

/**
 * Prepares variables for the ilr_certificate_basics_block template.
 *
 * Default template: ilr-certificate-basics-block.html.twig.
 */
function template_preprocess_ilr_certificate_basics_block(&$variables) {
  $variables['completion_time'] = $variables['node']->field_completion_time->value;

  $course_count = 0;

  foreach ($variables['node']->field_course->referencedEntities() as $course_node) {
    if ($course_node->isPublished()) {
      $course_count++;
    }
  }

  $variables['course_count'] = $course_count;
}

/**
 * Implements hook_preprocess_container__CONTAINER_ID().
 *
 * Update the collection request forms to make more relevant to ILR.
 */
function ilr_preprocess_container__content_entity_collections(&$variables) {
  if (isset($variables['children']['request_form'])) {
    $variables['children']['request_form']['collection_id']['#title'] = t('Request cross-post');
    $variables['children']['request_form']['collection_id']['#description'] = t('Select a collection above and the owner(s) will be notified of your request.');
  }

  if (isset($variables['children']['list']['table'])) {
    foreach ($variables['children']['list']['table']['#rows'] as $collection_item_id => $values) {
      $collection_item = \Drupal::entityTypeManager()->getStorage('collection_item')->load($collection_item_id);

      if (!$collection_item->isCanonical()) {
        $link = $collection_item->toLink(t('Cross-post'));
        $status = ($collection_item->getAttribute('collection-request-uid')) ? t('Pending') : $link;
        $variables['children']['list']['table']['#rows'][$collection_item_id]['canonical'] = $status;
      }
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function ilr_entity_operation(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'collection_item' && $entity->item->entity instanceof VocabularyInterface) {
    $operations = [];
    $operations['add_term'] = [
      'title' => t('Add new'),
      'url' => Url::fromRoute('entity.taxonomy_term.add_form', [
        'taxonomy_vocabulary' =>  $entity->item->entity->id(),
      ]),
      'weight' => 0,
    ];
    return $operations;
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function ilr_preprocess_views_view_field(&$variables) {
  if (empty($variables['row']->_entity) || !$variables['row']->_entity instanceof CollectionItemInterface) {
    return;
  }

  $is_collected_vocabulary = $variables['row']->_entity->item->entity instanceof VocabularyInterface;
  $is_collected_item_field = $variables['field']->realField === 'item__target_id';

  // Link collected vocabularies in collection item listings to the term listing
  // rather than the edit form.
  if ($is_collected_vocabulary && $is_collected_item_field) {
    $variables['output'] = $variables['row']->_entity->item->entity->toLink(null, 'overview-form');
  }
}

/**
 * Implements hook_ENTITY_TYPE_create_access() for entity type 'paragraph'.
 */
function ilr_paragraph_create_access(AccountInterface $account = NULL, array $context = array(), $entity_bundle = NULL) {
  if ($entity_bundle === 'instagram_listing') {
    // We use this restrictive permission to hide the instagram_listing
    // paragraph from most content editors.
    if ($account->hasPermission('administer paragraphs settings')) {
      return AccessResult::allowed()->cachePerPermissions();
    }

    return AccessResult::forbidden()->cachePerPermissions();
  }
}

/**
 * Implements hook_entity_field_access_alter().
 *
 * Add grant access for content owners with 'publish own content` permission.
 */
function ilr_entity_field_access_alter(array &$grants, array $context) {
  if ($context['field_definition']->getTargetEntityTypeId() === 'node' && $context['field_definition']->getName() === 'status' && $context['operation'] === 'edit') {
    if ($context['account']->hasPermission('administer nodes')) {
      return;
    }

    if ($context['items']->getEntity()->getOwnerId() === $context['account']->id()) {
      $grants[':default'] = AccessResult::allowedIfHasPermission($context['account'], 'publish own content');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function ilr_collection_item_access(EntityInterface $entity, $op, AccountInterface $account) {
  if ($entity->item->entity instanceof ContentEntityInterface) {
    return AccessResult::neutral();
  }

  // Prevent editing of collection items that collect config entities unless the
  // user can administer collections.
  if ($op === 'update') {
    return AccessResult::forbiddenIf(!$account->hasPermission('administer collections'))->cachePerPermissions();
  }
  // Prevent all users from deleting collection items that collect config
  // entities. These are always added programmatically, so they should also be
  // removed programmatically.
  elseif ($op === 'delete') {
    return AccessResult::forbidden();
  }
}

/**
 * Implements hook_form_alter().
 */
function ilr_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'editor_link_dialog' && isset($form['attributes']['media_library'])) {
    $form['attributes']['media_library']['#value'] = t('Document Library');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_media_confirm_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['entity_usage_delete_warning'])) {
    // Disable the "Delete" button. The entity_usage warning message text is
    // altered in $settings['locale_custom_strings_en'] in settings.php.
    $form['actions']['submit']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ilr_module_implements_alter(&$implementations, $hook) {
  // Run ilr_form_editor_link_dialog_alter() after
  // linkit_media_library_form_editor_link_dialog_alter() so we can alter the
  // 'Media Library' button.
  if ($hook === 'form_alter') {
    $group = $implementations['ilr'];
    unset($implementations['ilr']);
    $implementations['ilr'] = $group;
  }
}

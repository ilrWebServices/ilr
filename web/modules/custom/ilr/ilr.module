<?php

/**
 * @file
 * Contains ilr.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\ilr\FieldStorageDefinition;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function ilr_theme($existing, $type, $theme, $path) {
  return [
    'ilr_certificate_basics_block' => [
      'variables' => [
        'node' => [],
      ],
    ],
    'ilr_class_register_block' => [
      'variables' => [
        'classes' => [],
      ],
    ],
    'ilr_course_certificates_block' => [
      'variables' => [
        'node' => [],
        'certificates' => [],
      ],
    ],
    'ilr_course_page_nav_block' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_entity_field_storage_info().
 */
function ilr_entity_field_storage_info(EntityTypeInterface $entity_type) {
  $definitions = [];

  if ($entity_type->id() == 'node') {
    $definitions['classes'] = FieldStorageDefinition::create('entity_reference')
      ->setName('classes')
      ->setLabel(t('Classes'))
      ->setRevisionable(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
    $definitions['certificates'] = FieldStorageDefinition::create('entity_reference')
      ->setName('certificates')
      ->setLabel(t('Certificates'))
      ->setRevisionable(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
  }

  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function ilr_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'node' && $bundle == 'course') {
    $fields = [];

    $custom_field_storage = ilr_entity_field_storage_info($entity_type);

    $fields[$custom_field_storage['classes']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['classes']);

    $fields[$custom_field_storage['classes']->getName()]
      ->setLabel(t('Classes'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseClassItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'class' => 'class'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => -5,
      ]);

    $fields[$custom_field_storage['certificates']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['certificates']);

    $fields[$custom_field_storage['certificates']->getName()]
      ->setLabel(t('Certificates'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseCertificateItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'certificate' => 'certificate'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', FALSE);

    return $fields;
  }
}

/**
 * Implements template_preprocess_node().
 *
 */
function ilr_preprocess_node__course__teaser(&$variables) {
  $variables['class_count'] = $variables['node']->classes->count();

  if ($variables['class_count']) {
    $variables['next_class'] = $variables['node']->classes->first()->entity;
  }
}

/**
 * Implements hook_token_info().
 */
function ilr_token_info() {
  $info = [];
  $info['tokens']['paragraph']['parent_entity_label'] = [
    'name' => 'Parent Entity Label',
    'description' => 'The label of the paragraph parent entity.'
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function ilr_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'paragraph' && !empty($data['paragraph'])) {
    $host_entity = $data['paragraph']->getParentEntity();

    foreach ($tokens as $name => $token) {
      if ($name === 'parent_entity_label') {
        $replacements[$token] = $host_entity->label();
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'certificate') {
    $certificate_total = 0;
    $certificate_topics = [];

    // Deduce the total cost and topic terms of the certificate from its courses
    // (and classes).
    foreach ($entity->field_course->referencedEntities() as $course) {
      // Since `classes` is a computed field, and it is sorted by upcoming class
      // dates, using `first()` will ensure that the next upcoming class will be
      // used for the course price.
      if ($course->classes->count()) {
        $certificate_total += $course->classes->first()->entity->field_price->value;
      }

      // Add all unique topics for each course to the topics for certificate.
      foreach ($course->field_topics->referencedEntities() as $topic) {
        if (!in_array($topic->id(), $certificate_topics)) {
          $certificate_topics[] = $topic->id();
        }
      }
    }

    $entity->set('field_total_cost', $certificate_total);
    $entity->set('field_topics', $certificate_topics);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_taxonomy_term_presave(EntityInterface $entity) {
  // If this is a new topic, add some default page links to Certificates,
  // Programs, and Customized Programs.
  if ($entity->bundle() === 'topics' && $entity->isNew()) {
    $entity->set('field_page_links', [
      [
        'uri' => 'internal:#certificates',
        'title' => 'Certificates'
      ],
      [
        'uri' => 'internal:#programs',
        'title' => 'Programs'
      ],
      [
        'uri' => 'internal:/customized-programs',
        'title' => 'Customized Programs'
      ],
    ]);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add a new node add/edit form advance group section. This is generally shown
  // in the right-hand column.
  /** @see Drupal\node\NodeForm */
  $form['ilr_meta'] = [
    '#type' => 'details',
    '#title' => t('Meta'),
    '#group' => 'advanced',
    '#weight' => -10,
    '#optional' => TRUE,
    '#open' => TRUE,
  ];

  // Move the representative image and page body fields into the new section.
  $form['field_representative_image']['#group'] = 'ilr_meta';

  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof \Drupal\node\NodeForm) {
    $node = $form_object->getEntity();

    if ($node->bundle() === 'page') {
      $form['body']['#group'] = 'ilr_meta';
    }
  }
}

<?php

/**
 * @file
 * Contains ilr.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\ilr\FieldStorageDefinition;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Field\Entity\BaseFieldOverride;

/**
 * Implements hook_theme().
 */
function ilr_theme($existing, $type, $theme, $path) {
  return [
    'ilr_certificate_basics_block' => [
      'variables' => [
        'node' => [],
      ],
    ],
    'ilr_class_register_block' => [
      'variables' => [
        'classes' => [],
      ],
    ],
    'ilr_course_certificates_block' => [
      'variables' => [
        'node' => [],
        'certificates' => [],
      ],
    ],
    'ilr_course_page_nav_block' => [
      'variables' => [
        'node' => [],
        'links' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_field_storage_info().
 */
function ilr_entity_field_storage_info(EntityTypeInterface $entity_type) {
  $definitions = [];

  if ($entity_type->id() == 'node') {
    $definitions['classes'] = FieldStorageDefinition::create('entity_reference')
      ->setName('classes')
      ->setLabel(t('Classes'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
    $definitions['certificates'] = FieldStorageDefinition::create('entity_reference')
      ->setName('certificates')
      ->setLabel(t('Certificates'))
      ->setRevisionable(FALSE)
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id());
  }

  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 *
 * - Add computed fields to course nodes.
 * - Refine the settings for the collection_item `item` field:
 *   - Allow `media` and `taxonomy_term` entities.
 *   - Restrict the bundles for all allowed entities.
 *   - @todo: Allow these settings to be configured per collection_item bundle
 *     via the UI.
 */
function ilr_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];

  if ($entity_type->id() == 'node' && $bundle == 'course') {
    $custom_field_storage = ilr_entity_field_storage_info($entity_type);

    $fields[$custom_field_storage['classes']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['classes']);

    $fields[$custom_field_storage['classes']->getName()]
      ->setLabel(t('Classes'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseClassItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'class' => 'class'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => -5,
      ]);

    $fields[$custom_field_storage['certificates']->getName()] = FieldDefinition::createFromFieldStorageDefinition($custom_field_storage['certificates']);

    $fields[$custom_field_storage['certificates']->getName()]
      ->setLabel(t('Certificates'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\ilr\CourseCertificateItemList')
      ->setSettings([
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'certificate' => 'certificate'
          ]
        ],
      ])
      ->setDisplayConfigurable('view', FALSE);
  }

  // Update all collection_item bundles to use updated field settings.
  // @todo Move this to the collection module and configure each bundle dynamically.
  if ($entity_type->id() === 'collection_item') {
    $fields['item'] = BaseFieldOverride::createFromBaseFieldDefinition($base_field_definitions['item'], $bundle);
    $entity_type_ids_setting = $fields['item']->getSetting('entity_type_ids');
    $fields['item']
      ->setSetting('entity_type_ids', $entity_type_ids_setting + [
        'media' => 'media',
        'persona' => 'persona',
        'taxonomy_term' => 'taxonomy_term',
      ])
      ->setSetting('media', [
        'handler' => 'default:media',
        'handler_settings' => [
          'target_bundles' => [
            'image' => 'image',
            'remote_video' => 'remote_video',
          ]
        ]
      ])
      ->setSetting('node', [
        'handler' => 'default:node',
        'handler_settings' => [
          'target_bundles' => [
            'certificate' => 'certificate',
            'course' => 'course',
            'page' => 'page',
          ]
        ]
      ])
      ->setSetting('persona', [
        'handler' => 'default:persona',
        'handler_settings' => [
          'target_bundles' => [
            'author' => 'author',
            'faculty' => 'faculty',
            'staff' => 'staff',
          ]
        ]
      ])
      ->setSetting('taxonomy_term', [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'topics' => 'topics',
          ]
        ]
      ]);
  }

  return $fields;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ilr_entity_extra_field_info() {
  $extra = [];

  // Add a pseudo-field that can display the computed certificates field on this
  // course node. This will be exposed as a field block to layout builder.
  $extra['node']['course']['display']['ilr_certificates'] = [
    'label' => t('Certificates (computed)'),
    'description' => t('This is a computed backreference to certificates.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  // Add a pseudo-field that can display the course page links.
  $extra['node']['course']['display']['ilr_course_page_links'] = [
    'label' => t('Course Page Links (extra)'),
    'description' => t('A list of course page links.'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ilr_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('ilr_certificates') && $view_mode === 'full') {
    $build['ilr_certificates'] = [
      '#theme' => 'ilr_course_certificates_block',
      '#node' => $entity,
      '#certificates' => $entity->certificates->referencedEntities(),
    ];
  }

  if ($display->getComponent('ilr_course_page_links') && $view_mode === 'full') {
    $page_links = [
      [
        'url' => '#course-details',
        'text' => 'Course Details',
      ],
      [
        'url' => '#instructors',
        'text' => 'The Instructors',
      ],
      [
        'url' => '#related-courses',
        'text' => 'Related Courses',
      ],
      [
        'url' => '/programs/professional-programs/registration-information',
        'text' => 'Registration Information',
      ]
    ];

    if ($entity->classes->count() === 0) {
      // Remove the instructors link when there are no classes.
      unset($page_links[1]);
    }

    $build['ilr_course_page_links'] = [
      '#theme' => 'ilr_course_page_nav_block',
      '#node' => $entity,
      '#links' => $page_links,
    ];
  }
}

/**
 * Implements template_preprocess_node().
 *
 */
function ilr_preprocess_node__course__teaser(&$variables) {
  $variables['class_count'] = $variables['node']->classes->count();

  if ($variables['class_count']) {
    $variables['next_class'] = $variables['node']->classes->first()->entity;
  }
}

/**
 * Implements hook_token_info().
 */
function ilr_token_info() {
  $info = [];
  $info['tokens']['paragraph']['parent_entity_label'] = [
    'name' => 'Parent Entity Label',
    'description' => 'The label of the paragraph parent entity.'
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function ilr_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'paragraph' && !empty($data['paragraph'])) {
    $host_entity = $data['paragraph']->getParentEntity();

    foreach ($tokens as $name => $token) {
      if ($name === 'parent_entity_label') {
        $replacements[$token] = $host_entity->label();
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'certificate') {
    $certificate_total = 0;
    $certificate_topics = [];

    // Deduce the total cost and topic terms of the certificate from its courses
    // (and classes).
    foreach ($entity->field_course->referencedEntities() as $course) {
      // Since `classes` is a computed field, and it is sorted by upcoming class
      // dates, using `first()` will ensure that the next upcoming class will be
      // used for the course price.
      if ($course->classes->count()) {
        $certificate_total += $course->classes->first()->entity->field_price->value;
      }

      // Add all unique topics for each course to the topics for certificate.
      foreach ($course->field_topics->referencedEntities() as $topic) {
        if (!in_array($topic->id(), $certificate_topics)) {
          $certificate_topics[] = $topic->id();
        }
      }
    }

    $entity->set('field_total_cost', $certificate_total);
    $entity->set('field_topics', $certificate_topics);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ilr_taxonomy_term_presave(EntityInterface $entity) {
  // If this is a new topic, add some default page links to Certificates,
  // Programs, and Customized Programs.
  if ($entity->bundle() === 'topics' && $entity->isNew()) {
    $entity->set('field_page_links', [
      [
        'uri' => 'internal:#certificates',
        'title' => 'Certificates'
      ],
      [
        'uri' => 'internal:#programs',
        'title' => 'Programs'
      ],
      [
        'uri' => 'internal:/customized-programs',
        'title' => 'Customized Programs'
      ],
    ]);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['saml_login_title'] = [
    '#markup' => '<h2>' . t('Cornell Users') . '</h2>',
    '#weight' => -3
  ];

  $form['saml_login'] = [
    '#type' => 'link',
    '#url' => Url::fromRoute('samlauth.saml_controller_login'),
    '#title' => t('NetID Login'),
    '#weight' => -2,
    '#attributes' => [
      'class' => 'cu-button'
    ],
    '#attached' => [
      'library' => [
        'union_organizer/button'
      ]
    ]
  ];

  $form['drupal_login_title'] = [
    '#markup' => '<h2>' . t('No Cornell NetID?') . '</h2>',
    '#weight' => -1
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add a new node add/edit form advance group section. This is generally shown
  // in the right-hand column.
  /** @see Drupal\node\NodeForm */
  $form['ilr_meta'] = [
    '#type' => 'details',
    '#title' => t('Meta'),
    '#group' => 'advanced',
    '#weight' => -10,
    '#optional' => TRUE,
    '#open' => TRUE,
  ];

  // Move the representative image and page body fields into the new section.
  $form['field_representative_image']['#group'] = 'ilr_meta';

  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof \Drupal\node\NodeForm) {
    $node = $form_object->getEntity();

    if ($node->bundle() === 'page') {
      $form['body']['#group'] = 'ilr_meta';
    }

    if ($node->bundle() === 'post') {
      $form['body']['#group'] = 'ilr_meta';
      $form['field_authors']['#group'] = 'ilr_meta';
      $form['field_published_date']['#group'] = 'ilr_meta';
      $form['author']['#title'] = t('Creation information');
      $form['uid']['widget'][0]['target_id']['#title'] = t('Created by');
      $form['created']['widget'][0]['value']['#title'] = t('Created on');
    }
  }
}

/**
 * Implements hook_user_format_name_alter().
 *
 * Display the common name, if available, as the username.
 */
function ilr_user_format_name_alter(&$name, $account) {
  if ($account instanceof \Drupal\user\Entity\User === FALSE) {
    return;
  }

  if (!$account->field_common_name->isEmpty()) {
    $name = $account->field_common_name->value;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the collection new node form to add a subsite menu option.
 *
 * @see CollectionNewNodeForm::buildForm()
 */
function ilr_form_collection_new_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\collection\Entity\CollectionInterface $collection */
  $collection = $form_state->get('collection');

  if ($collection->bundle() === 'blog') {
    $form['bundle']['#default_value'] = 'post';
    $form['bundle']['#options'] = [
      'post' => 'Post',
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ilr_form_collection_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['body']) || isset($form['field_representative_image'])) {
    $form['ilr_meta'] = [
      '#type' => 'details',
      '#title' => t('Meta'),
      '#group' => 'advanced',
      '#weight' => 0,
      '#optional' => TRUE,
      '#open' => TRUE,
    ];

    if (isset($form['field_representative_image'])) {
      $form['field_representative_image']['#group'] = 'ilr_meta';
    }

    if (isset($form['body'])) {
      $form['body']['#group'] = 'ilr_meta';
    }
  }

}

<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\collection\Entity\CollectionType;
use Drupal\pathauto\PathautoState;

/**
 * @file
 * Contains collection_blogs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function collection_blogs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the collection_blogs module.
    case 'help.page.collection_blogs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows creation of custom collection-based blogs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Add a 'Contains Blogs' setting to collection_types.
 * - @todo:
 *   - Decide how to handle the possibility of both "Contains subsites" and "Contains blogs" being checked.
 */
function collection_blogs_form_collection_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $collection_type = $form_state->getFormObject()->getEntity();

  $form['contains_blogs'] = [
    '#type' => 'checkbox',
    '#title' => t('Contains blogs'),
    '#description' => t('If enabled, a collection of this type will represent a blog.'),
    '#default_value' => $collection_type->getThirdPartySetting('collection_blogs', 'contains_blogs'),
    '#weight' => 1
  ];

  $form['#entity_builders'][] = 'collection_blogs_form_collection_form_builder';
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * @see collection_blogs_taxonomy_term_view().
 */
function collection_blogs_entity_extra_field_info() {
  $extra = [];
  $entity_type_info = \Drupal::service('entity_type.bundle.info');

  foreach ($entity_type_info->getBundleInfo('taxonomy_term') as $vocabulary_id => $info) {
    if (preg_match('/^blog_\d+_categories$/', $vocabulary_id)) {
      $extra['taxonomy_term'][$vocabulary_id]['display']['collection_items_category_term'] = [
        'label' => $info['label'],
        'description' => t('This is a computed reference.'),
        'weight' => 0,
        'visible' => TRUE,
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function collection_blogs_taxonomy_term_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('collection_items_category_term') && $view_mode === 'full') {
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $collection_item_storage = $entity_type_manager->getStorage('collection_item');
    $view_builder = $entity_type_manager->getViewBuilder('node');
    $cache_tags = $entity->getCacheTags();
    $cache_tags[] = 'node_list'; // 'node_list:post'; // 8.9 and above
    $cache_tags[] = 'collection_item_list'; // 'collection_item_list:blog'; // 8.9 and above
    $posts = [];

    $blog_post_collection_items = $collection_item_storage->getQuery()
      ->condition('type', 'blog')
      ->condition('item.entity:node.status', 1)
      ->condition('item.entity:node.type', 'post') // @todo
      ->condition('field_blog_categories', $entity->id())
      ->sort('item.entity:node.field_published_date', 'DESC')
      ->execute();

    foreach ($collection_item_storage->loadMultiple($blog_post_collection_items) as $collection_item) {
      $posts[] = $view_builder->view($collection_item->item->entity, 'teaser');
    }

    $build['collection_items_term'] = [
      '#theme' => 'item_list__collection_listing',
      '#items' => $posts,
      '#attributes' => ['class' => 'collection-listing'],
      '#collection_listing' => TRUE,
      '#empty' => t('Content coming soon.'),
      '#context' => ['taxonomy_term' => $entity],
      '#cache' => [
        'tags' => $cache_tags,
      ],
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function collection_blogs_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  if ($node->bundle() !== 'post') {
    return;
  }

  $entity_type_manager = \Drupal::service('entity_type.manager');

  // Load all collection items that reference this node.
  $collection_item_storage = $entity_type_manager->getStorage('collection_item');

  $collection_item_ids = $collection_item_storage->getQuery()
    ->condition('type', 'blog')
    ->condition('item__target_type', 'node')
    ->condition('item__target_id', $node->id())
    ->execute();

  $collection_items = $collection_item_storage->loadMultiple($collection_item_ids);

  if (!$collection_items) {
    return;
  }

  // Create the inline entity form element.
  $form['collection_blog_categories'] = [
    '#type' => 'inline_entity_form',
    '#entity_type' => 'collection_item',
    '#bundle' => 'blog',
    '#weight' => 100,
    '#default_value' => count($collection_items) === 1 ? reset($collection_items) : NULL,
    '#form_mode' => 'mini',
    '#save_entity' => TRUE,
    '#op' => 'edit',
    '#group' => 'ilr_meta',
    '#access' => count($collection_items) === 1,
  ];
}

/**
 * Entity builder for the collection type configuration entity.
 */
function collection_blogs_form_collection_form_builder($entity_type, CollectionType $collection_type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('contains_blogs')) {
    $collection_type->setThirdPartySetting('collection_blogs', 'contains_blogs', $form_state->getValue('contains_blogs'));
    return;
  }

  $collection_type->unsetThirdPartySetting('contains_blogs', 'contains_blogs');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the collection new node form to add a form submit handler for blogs.
 *
 * @see CollectionNewNodeForm::buildForm()
 */
function collection_blogs_form_collection_new_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\collection\Entity\CollectionInterface $collection */
  $collection = $form_state->get('collection');

  if (!$collection->type->entity->getThirdPartySetting('collection_blogs', 'contains_blogs')) {
    return;
  }

  // Add a submit handler to process the alias and any categories.
  $form['#submit'][] = 'collection_blogs_form_collection_new_node_form_submit';

  // Check if this collection has a taxonomy vocabulary.
  foreach ($collection->findItems('taxonomy_vocabulary') as $collection_item_vocab) {
    if ($collection_item_vocab->getAttribute('blog_collection_id') !== FALSE) {
      $vocabulary = $collection_item_vocab->item->entity;
    }
  }

  if (empty($vocabulary)) {
    return;
  }

  $options = [];
  $terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadTree($vocabulary->id(), 0, NULL, TRUE);

  // Add a 'presubmit' handler to allow setting the collection item type to blog.
  array_unshift($form['#submit'], 'collection_blogs_form_collection_new_node_form_presubmit');

  foreach ($terms as $term) {
    $options[$term->id()] = $term->label();
  }

  // Note that we currently limit categories to posts. Revisit in the future.
  $form['blog_collection_categories'] = [
    '#access' => (bool) $options,
    '#type' => 'checkboxes',
    '#title' => t('Post categories'),
    '#description' => t('Choose which categories are appropriate for this post.'),
    '#options' => $options,
    '#states' => [
      'visible' => [
        'input[name="bundle"]' => ['value' => 'post'],
      ],
    ],
    '#default_value' => [],
  ];
}

/**
 * Form submission handler to set the collection_item_type.
 *
 * @see collection_blogs_form_collection_new_node_form_alter()
 */
function collection_blogs_form_collection_new_node_form_presubmit($form, FormStateInterface $form_state) {
  if ($form_state->getValue('bundle') === 'post') {
    $form_state->set('collection_item_type', 'blog');
  }
}

/**
 * Form submission handler to automatically set the alias for blog items.
 *
 * @see collection_blogs_form_collection_new_node_form_alter()
 */
function collection_blogs_form_collection_new_node_form_submit($form, FormStateInterface $form_state) {
  if ($node = $form_state->get('node')) {
    if (\Drupal::moduleHandler()->moduleExists('pathauto')) {
      $node->path->pathauto = PathautoState::SKIP;
      $alias_cleaner = \Drupal::service('pathauto.alias_cleaner');
      $clean_title = $alias_cleaner->cleanString($node->label());
    }
    else {
      $clean_title = strtolower(Html::cleanCssIdentifier($node->label()));
    }

    $collection = $form_state->get('collection');
    $node->path->alias = $collection->toUrl()->toString() . '/' . $clean_title;

    // Save the node again to trigger path updates.
    $node->save();
  }

  if ($collection_item = $form_state->get('collection_item')) {
    if ($collection_item->type->entity->id() === 'blog' && $form_state->hasValue('blog_collection_categories')) {
      foreach ($form_state->getValue('blog_collection_categories') as $tid) {
        if ($tid) {
          $collection_item->field_blog_categories->appendItem($tid);
        }
      }
      $collection_item->save();
    }
  }
}

<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\collection\Entity\CollectionType;
use Drupal\pathauto\PathautoState;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;

/**
 * @file
 * Contains collection_blogs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function collection_blogs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the collection_blogs module.
    case 'help.page.collection_blogs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows creation of custom collection-based blogs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Add a 'Contains Blogs' setting to collection_types.
 * - @todo:
 *   - Decide how to handle the possibility of both "Contains subsites" and "Contains blogs" being checked.
 */
function collection_blogs_form_collection_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $collection_type = $form_state->getFormObject()->getEntity();

  $form['contains_blogs'] = [
    '#type' => 'checkbox',
    '#title' => t('Contains blogs'),
    '#description' => t('If enabled, a collection of this type will represent a blog.'),
    '#default_value' => $collection_type->getThirdPartySetting('collection_blogs', 'contains_blogs'),
    '#weight' => 1
  ];

  $form['#entity_builders'][] = 'collection_blogs_form_collection_form_builder';
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * @see collection_blogs_taxonomy_term_view().
 * @see collection_blogs_node_view().
 */
function collection_blogs_entity_extra_field_info() {
  $extra = [];
  $entity_type_info = \Drupal::service('entity_type.bundle.info');

  foreach ($entity_type_info->getBundleInfo('taxonomy_term') as $vocabulary_id => $info) {
    if (preg_match('/^blog_\d+_categories$/', $vocabulary_id)) {
      $extra['taxonomy_term'][$vocabulary_id]['display']['collection_items_category_term'] = [
        'label' => $info['label'],
        'description' => t('This is a computed reference.'),
        'weight' => 0,
        'visible' => TRUE,
      ];

      $extra['taxonomy_term'][$vocabulary_id]['display']['blog_collection'] = [
        'label' => t('Blog'),
        'description' => t('This is a computed reference.'),
        'weight' => -1,
        'visible' => TRUE,
      ];
    }

    if (preg_match('/^blog_\d+_tags$/', $vocabulary_id)) {
      $extra['taxonomy_term'][$vocabulary_id]['display']['collection_items_tag_term'] = [
        'label' => $info['label'],
        'weight' => 0,
        'visible' => TRUE,
      ];

      $extra['taxonomy_term'][$vocabulary_id]['display']['blog_collection'] = [
        'label' => t('Blog'),
        'weight' => -1,
        'visible' => TRUE,
      ];
    }
  }

  $extra['node']['post']['display']['blog_collection'] = [
    'label' => t('Blog'),
    'description' => t('This is a computed reference.'),
    'weight' => -1,
    'visible' => TRUE,
  ];

  $extra['node']['post']['display']['blog_tags'] = [
    'label' => t('Blog tags'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function collection_blogs_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $collection_item_storage = $entity_type_manager->getStorage('collection_item');
  $view_builder = $entity_type_manager->getViewBuilder('node');

  $mapping = [
    'collection_items_category_term' => 'field_blog_categories',
    'collection_items_tag_term' => 'field_blog_tags',
  ];

  foreach ($mapping as $component_name => $term_reference_field_name) {
    if ($display->getComponent($component_name) && $view_mode === 'full') {
      $cache_tags = $entity->getCacheTags();
      $cache_tags[] = 'node_list'; // 'node_list:post'; // 8.9 and above
      $cache_tags[] = 'collection_item_list'; // 'collection_item_list:blog'; // 8.9 and above
      $posts = [];

      $blog_post_collection_items = $collection_item_storage->getQuery()
        ->condition('type', 'blog')
        ->condition('item.entity:node.status', 1)
        ->condition('item.entity:node.type', ['post', 'media_mention'], 'IN')
        ->condition($term_reference_field_name, $entity->id())
        ->sort('item.entity:node.field_published_date', 'DESC')
        ->execute();

      foreach ($collection_item_storage->loadMultiple($blog_post_collection_items) as $collection_item) {
        $rendered_content = $view_builder->view($collection_item->item->entity, 'teaser');
        $rendered_content['#collection_item'] = $collection_item;
        $posts[] = $rendered_content;
      }

      $build[$component_name] = [
        '#theme' => 'item_list__collection_listing',
        '#items' => $posts,
        '#attributes' => ['class' => 'collection-listing cu-grid--3col cu-grid'],
        '#collection_listing' => TRUE,
        '#empty' => t('Content coming soon.'),
        '#context' => ['taxonomy_term' => $entity],
        '#cache' => [
          'tags' => $cache_tags,
        ],
      ];
    }
  }

  if ($display->getComponent('blog_collection')) {
    $vocabulary_collection_items = $collection_item_storage->getQuery()
      ->condition('item__target_type', 'taxonomy_vocabulary')
      ->condition('item__target_id', $entity->getVocabularyId())
      ->execute();

    if ($vocabulary_collection_items) {
      $vocabulary_collection_item = $collection_item_storage->load(reset($vocabulary_collection_items));
      $build['blog_collection'] = $entity_type_manager->getViewBuilder('collection')->view($vocabulary_collection_item->collection->entity, 'banner');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function collection_blogs_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode !== 'full') {
    return;
  }

  if ($display->getComponent('blog_collection')) {
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $collection_item_storage = $entity_type_manager->getStorage('collection_item');

    $blog_post_collection_items = $collection_item_storage->getQuery()
      ->condition('type', 'blog')
      ->condition('item__target_type', 'node')
      ->condition('item__target_id', $entity->id())
      ->condition('canonical', 1)
      ->execute();

    foreach ($collection_item_storage->loadMultiple($blog_post_collection_items) as $collection_item) {
      if (!$collection_item->collection->entity->type->entity->getThirdPartySetting('collection_blogs', 'contains_blogs')) {
        continue;
      }

      $build['blog_collection'] = $entity_type_manager->getViewBuilder('collection')->view($collection_item->collection->entity, 'banner');
      break;
    }
  }

  if ($display->getComponent('blog_tags')) {
    // Find the collection item for this post node.
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $collection_item_storage = $entity_type_manager->getStorage('collection_item');

    $blog_post_collection_item_id = $collection_item_storage->getQuery()
      ->condition('type', 'blog')
      ->condition('item__target_type', 'node')
      ->condition('item__target_id', $entity->id())
      ->range(0, 1) // Limit to one; posts should only be in a single collection.
      ->execute();

    if (empty($blog_post_collection_item_id)) {
      return;
    }

    $blog_post_collection_item = $collection_item_storage->load(reset($blog_post_collection_item_id));

    // If the collection item was found, display the blog tags field as a teaser.
    if ($blog_post_collection_item) {
      $build['blog_tags'] = $blog_post_collection_item->field_blog_tags->view('teaser');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Add a head link to the feed for a given blog.
 */
function collection_blogs_collection_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'blog') {
    // Attach a link to the Atom feed, which is an alternate representation.
    $build['#attached']['html_head_link'][][] = [
      'rel' => 'alternate',
      'type' => 'application/atom+xml',
      'title' => $entity->label(),
      'href' => Url::fromRoute('blog.feed', ['collection' => $entity->id()], ['absolute' => TRUE])->toString(),
    ];
  }
}

/**
 * Entity builder for the collection type configuration entity.
 */
function collection_blogs_form_collection_form_builder($entity_type, CollectionType $collection_type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('contains_blogs')) {
    $collection_type->setThirdPartySetting('collection_blogs', 'contains_blogs', $form_state->getValue('contains_blogs'));
    return;
  }

  $collection_type->unsetThirdPartySetting('contains_blogs', 'contains_blogs');
}

/**
 * Implements hook_collection_pathauto_alias_alter().
 *
 * Updates the alias for posts that are in a canonical collection.
 */
function collection_blogs_collection_pathauto_alias_alter(&$alias, array &$context) {
  if (isset($context['canonical_collection']) && isset($context['collection_item'])) {
    // Ensure that this is a blog collection.
    $collection_type = \Drupal::service('entity_type.manager')->getStorage('collection_type')->load($context['canonical_collection']->bundle());
    $is_blog = (bool) $collection_type->getThirdPartySetting('collection_blogs', 'contains_blogs');

    if ($is_blog === FALSE) {
      return;
    }

    // Modify the alias, which changes depending on whether the post has a category.
    if ($context['collection_item']->hasField('field_blog_categories') && !$context['collection_item']->field_blog_categories->isEmpty()) {
      $path_parts = explode('/', $alias);

      // Use the alias of the category term followed by the last part of the
      // original path, which is probably the node title or menu link title.
      $alias = $context['collection_item']->field_blog_categories->entity->toUrl()->toString() . '/' . array_pop($path_parts);
    }
  }
}

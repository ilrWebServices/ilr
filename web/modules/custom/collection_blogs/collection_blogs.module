<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\collection\Entity\CollectionType;
use Drupal\pathauto\PathautoState;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;
use Drupal\pathauto\PathautoPatternInterface;
use Drupal\Core\Database\Query\PagerSelectExtender;
use Drupal\ilr\IlrLayoutEntityHelper;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;

/**
 * @file
 * Contains collection_blogs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function collection_blogs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the collection_blogs module.
    case 'help.page.collection_blogs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows creation of custom collection-based blogs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Add a 'Contains Blogs' setting to collection_types.
 * - @todo:
 *   - Decide how to handle the possibility of both "Contains subsites" and "Contains blogs" being checked.
 */
function collection_blogs_form_collection_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $collection_type = $form_state->getFormObject()->getEntity();

  $form['contains_blogs'] = [
    '#type' => 'checkbox',
    '#title' => t('Contains blogs'),
    '#description' => t('If enabled, a collection of this type will represent a blog.'),
    '#default_value' => $collection_type->getThirdPartySetting('collection_blogs', 'contains_blogs'),
    '#weight' => 1
  ];

  $form['#entity_builders'][] = 'collection_blogs_form_collection_form_builder';
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * @see collection_blogs_taxonomy_term_view().
 * @see collection_blogs_node_view().
 */
function collection_blogs_entity_extra_field_info() {
  $extra = [];
  $entity_type_info = \Drupal::service('entity_type.bundle.info');

  foreach ($entity_type_info->getBundleInfo('taxonomy_term') as $vocabulary_id => $info) {
    if (preg_match('/^blog_\d+_categories$/', $vocabulary_id)) {
      $extra['taxonomy_term'][$vocabulary_id]['display']['collection_items_category_term'] = [
        'label' => $info['label'],
        'description' => t('This is a computed reference.'),
        'weight' => 0,
        'visible' => TRUE,
      ];

      $extra['taxonomy_term'][$vocabulary_id]['display']['blog_collection'] = [
        'label' => t('Blog'),
        'description' => t('This is a computed reference.'),
        'weight' => -1,
        'visible' => TRUE,
      ];
    }

    if (preg_match('/^blog_\d+_tags$/', $vocabulary_id)) {
      $extra['taxonomy_term'][$vocabulary_id]['display']['collection_items_tag_term'] = [
        'label' => $info['label'],
        'weight' => 0,
        'visible' => TRUE,
      ];

      $extra['taxonomy_term'][$vocabulary_id]['display']['blog_collection'] = [
        'label' => t('Blog'),
        'weight' => -1,
        'visible' => TRUE,
      ];
    }
  }

  foreach (\Drupal::service('extended_post.manager')->getPostTypes() as $post_type) {
    $extra['node'][$post_type]['display']['blog_collection'] = [
      'label' => t('Blog'),
      'description' => t('This is a computed reference.'),
      'weight' => -1,
      'visible' => TRUE,
    ];

    $extra['node'][$post_type]['display']['blog_tags'] = [
      'label' => t('Blog tags'),
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function collection_blogs_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $collection_item_storage = $entity_type_manager->getStorage('collection_item');
  $view_builder = $entity_type_manager->getViewBuilder('node');
  $ilr_layout_entity_helper = new IlrLayoutEntityHelper();
  $post_types = \Drupal::service('extended_post.manager')->getPostTypes();

  $mapping = [
    'collection_items_category_term' => 'field_blog_categories',
    'collection_items_tag_term' => 'field_blog_tags',
  ];

  foreach ($mapping as $component_name => $term_reference_field_name) {
    $component_used = FALSE;

    if ($display instanceof LayoutBuilderEntityViewDisplay) {
      foreach ($ilr_layout_entity_helper->getEntitySections($entity) as $section) {
        foreach ($section->getComponents() as $component) {
          if (strpos($component->getPluginId(), $component_name)) {
            $component_used = TRUE;
            break 2;
          }
        }
      }
    }
    else {
      $component_used = $display->getComponent($component_name);
    }

    if ($component_used && $view_mode === 'full' && !empty($post_types)) {
      $cache_tags = $entity->getCacheTags();
      $cache_tags[] = 'node_list'; // 'node_list:post'; // 8.9 and above
      $cache_tags[] = 'collection_item_list'; // 'collection_item_list:blog'; // 8.9 and above
      $posts = [];

      $pending_items = \Drupal::database()
        ->select('collection_item__attributes', 'cia')
        ->fields('cia', ['entity_id'])
        ->condition('cia.bundle', 'blog')
        ->condition('cia.attributes_key', 'collection-request-uid');

      $blog_post_collection_items = $collection_item_storage->getQuery()
        ->condition('id', $pending_items, 'NOT IN')
        ->condition('type', 'blog')
        ->condition('item.entity:node.status', 1)
        ->condition('item.entity:node.type', $post_types, 'IN')
        ->condition($term_reference_field_name, $entity->id())
        ->sort('item.entity:node.field_published_date', 'DESC')
        ->pager(30)
        ->execute();

      foreach ($collection_item_storage->loadMultiple($blog_post_collection_items) as $collection_item) {
        $rendered_content = $view_builder->view($collection_item->item->entity, 'teaser');
        $rendered_content['#collection_item'] = $collection_item;
        $rendered_content['#cache']['contexts'][] = 'url';
        $posts[] = $rendered_content;
      }

      $build[$component_name]['listing'] = [
        '#theme' => 'item_list__collection_listing',
        '#items' => $posts,
        '#attributes' => ['class' => 'collection-listing cu-grid--3col cu-grid'],
        '#collection_listing' => TRUE,
        '#empty' => t('Content coming soon.'),
        '#context' => ['taxonomy_term' => $entity],
        '#cache' => [
          'tags' => $cache_tags,
        ],
      ];

      $element_id = \Drupal::service('pager.manager')->getMaxPagerElementId();

      $build[$component_name]['pager'] = [
        '#type' => 'pager',
        '#element' => $element_id,
        '#parameters' => ['post_listing' => $element_id],
        '#attached' => [
          'library' => ['ilr/ilr_pager'],
        ],
      ];
    }
  }

  if ($display->getComponent('blog_collection')) {
    $vocabulary_collection_items = $collection_item_storage->getQuery()
      ->condition('item__target_type', 'taxonomy_vocabulary')
      ->condition('item__target_id', $entity->bundle())
      ->execute();

    if ($vocabulary_collection_items) {
      $vocabulary_collection_item = $collection_item_storage->load(reset($vocabulary_collection_items));
      $build['blog_collection'] = $entity_type_manager->getViewBuilder('collection')->view($vocabulary_collection_item->collection->entity, 'banner');
    }
  }

  if (preg_match('/^blog_(\d+)_(categories|tags)$/', $entity->bundle(), $matches) && $view_mode === 'full') {
    $url = Url::fromRoute('blog.term.feed', ['collection' => $matches[1], 'taxonomy_term' => $entity->id()], ['absolute' => TRUE]);

    // Attach a link to the Atom feed, which is an alternate representation.
    $build['#attached']['html_head_link'][][] = [
      'rel' => 'alternate',
      'type' => 'application/atom+xml',
      'title' => $entity->label(),
      'href' => $url->toString(),
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function collection_blogs_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode !== 'full') {
    return;
  }

  if ($display->getComponent('blog_collection')) {
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $collection_item_storage = $entity_type_manager->getStorage('collection_item');

    $blog_post_collection_items = $collection_item_storage->getQuery()
      ->condition('type', 'blog')
      ->condition('item__target_type', 'node')
      ->condition('item__target_id', $entity->id())
      ->condition('canonical', 1)
      ->execute();

    foreach ($collection_item_storage->loadMultiple($blog_post_collection_items) as $collection_item) {
      if (!$collection_item->collection->entity->type->entity->getThirdPartySetting('collection_blogs', 'contains_blogs')) {
        continue;
      }

      $build['blog_collection'] = $entity_type_manager->getViewBuilder('collection')->view($collection_item->collection->entity, 'banner');
      break;
    }
  }

  if ($display->getComponent('blog_tags')) {
    // Find the collection item for this post node.
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $collection_item_storage = $entity_type_manager->getStorage('collection_item');

    $blog_post_collection_item_id = $collection_item_storage->getQuery()
      ->condition('type', 'blog')
      ->condition('item__target_type', 'node')
      ->condition('item__target_id', $entity->id())
      ->range(0, 1) // Limit to one; posts should only be in a single collection.
      ->execute();

    if (empty($blog_post_collection_item_id)) {
      return;
    }

    $blog_post_collection_item = $collection_item_storage->load(reset($blog_post_collection_item_id));

    // If the collection item was found, display the blog tags field as a teaser.
    if ($blog_post_collection_item) {
      $build['blog_tags'] = $blog_post_collection_item->field_blog_tags->view('teaser');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Add a head link to the feed for a given blog.
 */
function collection_blogs_collection_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'blog' && $view_mode === 'full') {
    // Attach a link to the Atom feed, which is an alternate representation.
    $build['#attached']['html_head_link'][][] = [
      'rel' => 'alternate',
      'type' => 'application/atom+xml',
      'title' => $entity->label(),
      'href' => Url::fromRoute('blog.feed', ['collection' => $entity->id()], ['absolute' => TRUE])->toString(),
    ];
  }
}

/**
 * Entity builder for the collection type configuration entity.
 */
function collection_blogs_form_collection_form_builder($entity_type, CollectionType $collection_type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('contains_blogs')) {
    $collection_type->setThirdPartySetting('collection_blogs', 'contains_blogs', $form_state->getValue('contains_blogs'));
    return;
  }

  $collection_type->unsetThirdPartySetting('contains_blogs', 'contains_blogs');
}

/**
 * Implements hook_collection_pathauto_alias_alter().
 *
 * Updates the alias for content that is in a blog category.
 */
function collection_blogs_collection_pathauto_alias_alter(&$alias, array &$context) {
  if ($context['collection_item']->hasField('field_blog_categories') && !$context['collection_item']->field_blog_categories->isEmpty()) {
    // Prepend the category path to the original alias. In most cases, the
    // category term path will include the collection path.
    $alias = $context['collection_item']->field_blog_categories->entity->toUrl()->toString() . $context['original_alias'];
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 *
 * Update the path pattern for the auto-generated vocabularies.
 *
 * @see collection_pathauto_pathauto_alias_alter(), which alters the alias.
 */
function collection_blogs_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  // Check if the pattern is for a term.
  if (isset($context['module']) && $context['module'] === 'taxonomy') {
    // See CollectionBlogsSubscriber::collectionCreate().
    if (preg_match('/^blog_\d*_(tags|categories)$/', $context['bundle'], $matches)) {
      $prefix = ($matches[1] === 'tags') ? 'tags/' : '';
      $pattern->setPattern($prefix . '[term:name]');
    }
  }

  // Alter the pattern for all nodes that are canonically collected and categorized.
  // @see collection_pathauto_pathauto_alias_alter().
  if (isset($context['data']['node'])) {
    $collection_content_manager = \Drupal::service('collection.content_manager');

    foreach ($collection_content_manager->getCollectionItemsForEntity($context['data']['node']) as $collection_item) {
      if ($collection_item->isCanonical() && $collection_item->hasField('field_blog_categories') && !$collection_item->field_blog_categories->isEmpty()) {
        return $pattern->setPattern('[node:title]');
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Automatically add canonical vocabulary terms to the collection.
 */
function collection_blogs_taxonomy_term_insert(EntityInterface $term) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $collection_content_manager = \Drupal::service('collection.content_manager');
  $vocab = $term->vid->entity;

  foreach ($collection_content_manager->getCollectionItemsForEntity($vocab) as $collection_item) {
    if ($collection_item->isCanonical()) {
      $collection_type = $collection_item->collection->entity->type->entity;
      $allowed_collection_item_types = $collection_type->getAllowedCollectionItemTypes('taxonomy_term', $term->bundle());

      $type = ($allowed_collection_item_types)
        ? reset($allowed_collection_item_types)
        : 'default';

      $collection_item_term = $entity_type_manager->getStorage('collection_item')->create([
        'type' => $type,
        'collection' => $collection_item->collection->entity->id(),
        'canonical' => TRUE,
      ]);

      $collection_item_term->item = $term;
      $collection_item_term->save();
      return;
    }
  }
}

<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * @file
 * Contains collection_projects.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\ilr\IlrLayoutEntityHelper;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\node\NodeTypeInterface;
use Drupal\pathauto\PathautoPatternInterface;

/**
 * Implements hook_help().
 */
function collection_projects_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the collection_projects module.
    case 'help.page.collection_projects':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds custom support for projects within collections.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_theme_suggestions_HOOK().
 */
function collection_projects_theme_suggestions_field_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if ($element['#field_name'] == 'name' && preg_match('/^project_\d*_(focus_areas)$/', $element['#bundle'], $matches)) {
    $suggestions[] = 'field__' . $element['#entity_type'] . '__project_focus_area' . '__' . $element['#field_name'];

    // See layout_builder_theme_suggestions_field_alter().
    if (isset($element['#third_party_settings']['layout_builder']['view_mode'])) {
      $suggestions[] = 'field__' . $element['#entity_type'] . '__project_focus_area' . '__' . $element['#field_name'] . '__' . $element['#third_party_settings']['layout_builder']['view_mode'];
    }
  }
  return $suggestions;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * - Add a 'Is a project type' setting to node types.
 */
function collection_projects_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node_type = $form_state->getFormObject()->getEntity();

  $form['is_project'] = [
    '#type' => 'checkbox',
    '#title' => t('Is a project type'),
    '#description' => t('If enabled, content of this type will be considered a Project and can be used in project listings.'),
    '#default_value' => $node_type->getThirdPartySetting('collection_projects', 'is_project'),
    '#weight' => 1
  ];

  $form['#entity_builders'][] = 'collection_projects_form_node_form_builder';
}

/**
 * Entity builder for the node type configuration entity.
 */
function collection_projects_form_node_form_builder($entity_type, NodeTypeInterface $node_type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('is_project')) {
    $node_type->setThirdPartySetting('collection_projects', 'is_project', $form_state->getValue('is_project'));
    return;
  }

  $node_type->unsetThirdPartySetting('collection_projects', 'is_project');
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * @see collection_projects_node_view().
 */
function collection_projects_entity_extra_field_info() {
  $extra = [];
  $entity_type_info = \Drupal::service('entity_type.bundle.info');

  $extra['node']['project']['display']['project_focus_areas'] = [
    'label' => t('Focus areas (canonical)'),
    'description' => t('This is a computed reference.'),
    'weight' => 102,
    'visible' => TRUE,
  ];

  foreach ($entity_type_info->getBundleInfo('taxonomy_term') as $vocabulary_id => $info) {
    if (preg_match('/^project_\d+_focus_areas$/', $vocabulary_id)) {
      $extra['taxonomy_term'][$vocabulary_id]['display']['collection_items_focus_area_term'] = [
        'label' => $info['label'],
        'description' => t('This is a computed reference.'),
        'weight' => 0,
        'visible' => TRUE,
      ];
    }
  }
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function collection_projects_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $collection_item_storage = $entity_type_manager->getStorage('collection_item');
  $view_builder = $entity_type_manager->getViewBuilder('node');
  $ilr_layout_entity_helper = new IlrLayoutEntityHelper();
  $component_used = FALSE;

  if ($display instanceof LayoutBuilderEntityViewDisplay && $display->isLayoutBuilderEnabled()) {
    foreach ($ilr_layout_entity_helper->getEntitySections($entity) as $section) {
      foreach ($section->getComponents() as $component) {
        if (strpos($component->getPluginId(), 'collection_items_focus_area_term')) {
          $component_used = TRUE;
          break 2;
        }
      }
    }
  }
  else {
    $component_used = $display->getComponent('collection_items_focus_area_term');
  }

  if ($component_used && $view_mode === 'full') {
    $cache_tags = $entity->getCacheTags();
    $cache_tags[] = 'node_list:project';
    $cache_tags[] = 'collection_item_list:project_item';
    $projects = [];

    $pending_items = \Drupal::database()
      ->select('collection_item__attributes', 'cia')
      ->fields('cia', ['entity_id'])
      ->condition('cia.bundle', 'project_item')
      ->condition('cia.attributes_key', 'collection-request-uid');

    $project_collection_items = $collection_item_storage->getQuery()
      ->accessCheck(TRUE)
      ->condition('id', $pending_items, 'NOT IN')
      ->condition('type', 'project_item')
      ->condition('item.entity:node.status', 1)
      ->condition('item.entity:node.type', 'project')
      ->condition('field_focus_areas', $entity->id())
      ->sort('sticky', 'DESC')
      ->sort('item.entity:node.field_published_date', 'DESC')
      ->sort('item.entity:node.created', 'DESC')
      ->pager(30)
      ->execute();

    foreach ($collection_item_storage->loadMultiple($project_collection_items) as $collection_item) {
      $rendered_content = $view_builder->view($collection_item->item->entity, 'mini');
      $rendered_content['#collection_item'] = $collection_item;
      $rendered_content['#cache']['contexts'][] = 'url';
      $projects[] = $rendered_content;
    }

    $build['collection_items_focus_area_term']['listing'] = [
      '#theme' => 'item_list__collection_listing',
      '#items' => $projects,
      '#attributes' => ['class' => 'collection-listing collection-listing--project'],
      '#collection_listing' => TRUE,
      '#empty' => t('Content coming soon.'),
      '#context' => ['taxonomy_term' => $entity],
      '#cache' => [
        'tags' => $cache_tags,
      ],
    ];
  }
}
/**
 * Implements hook_ENTITY_TYPE_view().
 */
function collection_projects_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode !== 'full') {
    return;
  }

  if ($display->getComponent('project_focus_areas')) {
    // Find the canonical collection item for this project.
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $collection_item_storage = $entity_type_manager->getStorage('collection_item');

    $project_focus_areas_collection_item_id = $collection_item_storage->getQuery()
      ->accessCheck(TRUE)
      ->condition('type', 'project_item')
      ->condition('item__target_type', 'node')
      ->condition('item__target_id', $entity->id())
      ->condition('canonical', 1)
      ->execute();

    if (empty($project_focus_areas_collection_item_id)) {
      return;
    }

    $project_focus_areas_collection_item = $collection_item_storage->load(reset($project_focus_areas_collection_item_id));

    // If the collection item was found, display the blog focus areas field as a teaser.
    if ($project_focus_areas_collection_item) {
      $build['project_focus_areas'] = $project_focus_areas_collection_item->field_focus_areas->view('teaser');
    }
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 *
 * Update the path pattern for the auto-generated vocabularies.
 *
 * @see collection_pathauto_pathauto_alias_alter(), which alters the alias.
 */
function collection_projects_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  // Check if the pattern is for a term.
  if (isset($context['module']) && $context['module'] === 'taxonomy') {
    // See CollectionProjectsSubscriber::collectionCreate().
    if (preg_match('/^project_\d*_(focus_areas)$/', $context['bundle'], $matches)) {
      $pattern->setPattern('focus/[term:name]');
    }
  }
}
